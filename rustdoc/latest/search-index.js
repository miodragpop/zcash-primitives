var searchIndex = JSON.parse('{\
"equihash":{"doc":"Equihash is a Proof-of-Work algorithm, based on a …","t":[3,11,11,11,11,11,11,5,11,11,11,11],"n":["Error","borrow","borrow_mut","fmt","fmt","from","into","is_valid_solution","to_string","try_from","try_into","type_id"],"q":["equihash","","","","","","","","","","",""],"d":["An Equihash solution failed to verify.","","","","","","","Checks whether <code>soln</code> is a valid solution for <code>(input, nonce)</code> …","","","",""],"i":[0,1,1,1,1,1,1,0,1,1,1,1],"f":[null,[[]],[[]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[["u32",15]],[["result",4,["error"]],["error",3]]],[[],["string",3]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]]],"p":[[3,"Error"]]},\
"f4jumble":{"doc":"","t":[5,5],"n":["f4jumble","f4jumble_inv"],"q":["f4jumble",""],"d":["",""],"i":[0,0],"f":[[[],[["option",4,["vec"]],["vec",3,["u8"]]]],[[],[["option",4,["vec"]],["vec",3,["u8"]]]]],"p":[]},\
"zcash_address":{"doc":"","t":[8,13,13,4,13,4,13,13,8,13,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,10,11,11,11,11,10,11,11,11,10,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,12,3,13,13,13,13,13,13,13,13,13,13,13,4,4,13,13,4,13,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,12,12,12],"n":["FromAddress","InvalidEncoding","Main","Network","NotZcash","ParseError","Regtest","Test","ToAddress","Unified","UnsupportedAddress","ZcashAddress","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","convert","eq","eq","eq","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from_sapling","from_sapling","from_sapling","from_sapling","from_sprout","from_sprout","from_sprout","from_sprout","from_str","from_transparent_p2pkh","from_transparent_p2pkh","from_transparent_p2pkh","from_transparent_p2pkh","from_transparent_p2sh","from_transparent_p2sh","from_transparent_p2sh","from_transparent_p2sh","from_unified","from_unified","from_unified","from_unified","hash","hash","into","into","into","into","ne","ne","to_owned","to_owned","to_string","to_string","to_string","try_from","try_from","try_from","try_from","try_from_encoded","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","unified","0","Address","BothP2phkAndP2sh","DuplicateTypecode","InvalidEncoding","InvalidTypecodeValue","OnlyTransparent","Orchard","Orchard","P2pkh","P2pkh","P2sh","P2sh","ParseError","Receiver","Sapling","Sapling","Typecode","Unknown","Unknown","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone_into","clone_into","clone_into","cmp","cmp","eq","eq","eq","eq","fmt","fmt","fmt","fmt","fmt","from","from","from","from","hash","hash","hash","into","into","into","into","ne","ne","ne","ne","partial_cmp","partial_cmp","receivers","receivers_as_parsed","to_owned","to_owned","to_owned","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","0","0","0","0","0","0","0","data","typecode","0"],"q":["zcash_address","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","zcash_address::ParseError","zcash_address::unified","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","zcash_address::unified::ParseError","","","zcash_address::unified::Receiver","","","","","","zcash_address::unified::Typecode"],"d":["A helper trait for converting a <code>ZcashAddress</code> into another …","The string is an invalid encoding.","Zcash Mainnet.","The Zcash network for which an address is encoded.","The string is not a Zcash address.","An error while attempting to parse a string as a Zcash …","Private integration / regression testing, used in <code>zcashd</code>.","Zcash Testnet.","A helper trait for converting another type into a …","Errors specific to unified addresses.","An address type is not supported for conversion.","A Zcash address.","","","","","","","","","","","","","Converts this address into another type.","","","","","","","","","","","","","","","","","","","","","","","","Attempts to parse the given string as a Zcash address.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Attempts to parse the given string as a Zcash address.","","","","","","","","","","","A Unified Address.","The unified address contains both P2PKH and P2SH receivers.","The unified address contains a duplicated typecode.","The string is an invalid encoding.","The parsed typecode exceeds the maximum allowed …","The unified address only contains transparent receivers.","","","","","","","An error while attempting to parse a string as a Zcash …","The set of known Receivers for Unified Addresses.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the receivers contained within this address, …","Returns the receivers contained within this address, in …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[0,1,2,0,1,0,2,2,0,1,0,0,3,1,4,2,3,1,4,2,4,2,4,2,4,1,4,2,3,3,1,1,4,4,2,3,1,1,4,2,5,6,6,4,5,6,6,4,4,5,6,6,4,5,6,6,4,5,6,6,4,4,2,3,1,4,2,1,4,4,2,3,1,4,3,1,4,2,4,3,1,4,2,3,1,4,2,0,7,0,8,8,8,8,8,9,10,9,10,9,10,0,0,9,10,0,9,10,9,8,10,11,9,8,10,11,9,10,11,9,10,11,9,10,9,8,10,11,9,8,8,10,11,9,8,10,11,9,10,11,9,8,10,11,9,8,10,11,9,10,11,11,9,10,11,8,9,9,8,10,10,11,11,11,9,8,10,11,9,8,10,11,12,13,14,15,16,17,18,19,19,20],"f":[null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["zcashaddress",3]],[[],["network",4]],[[]],[[]],[[],[["fromaddress",8],["unsupportedaddress",3],["result",4,["unsupportedaddress"]]]],[[["parseerror",4]],["bool",15]],[[["zcashaddress",3]],["bool",15]],[[["network",4]],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[["parseerror",4]]],[[]],[[]],[[["network",4]]],[[["network",4]],[["unsupportedaddress",3],["result",4,["unsupportedaddress"]]]],[[["network",4]],[["unsupportedaddress",3],["result",4,["unsupportedaddress"]]]],[[["network",4]]],[[["network",4]]],[[["network",4]],[["unsupportedaddress",3],["result",4,["unsupportedaddress"]]]],[[["network",4]],[["unsupportedaddress",3],["result",4,["unsupportedaddress"]]]],[[["network",4]]],[[["str",15]],["result",4]],[[["network",4]]],[[["network",4]],[["unsupportedaddress",3],["result",4,["unsupportedaddress"]]]],[[["network",4]],[["unsupportedaddress",3],["result",4,["unsupportedaddress"]]]],[[["network",4]]],[[["network",4]]],[[["network",4]],[["unsupportedaddress",3],["result",4,["unsupportedaddress"]]]],[[["network",4]],[["unsupportedaddress",3],["result",4,["unsupportedaddress"]]]],[[["network",4]]],[[["network",4],["address",3]]],[[["network",4],["address",3]],[["unsupportedaddress",3],["result",4,["unsupportedaddress"]]]],[[["network",4],["address",3]],[["unsupportedaddress",3],["result",4,["unsupportedaddress"]]]],[[["network",4],["address",3]]],[[]],[[]],[[]],[[]],[[]],[[]],[[["parseerror",4]],["bool",15]],[[["zcashaddress",3]],["bool",15]],[[]],[[]],[[],["string",3]],[[],["string",3]],[[],["string",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["str",15]],[["parseerror",4],["result",4,["parseerror"]]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["typecode",4]],[[],["receiver",4]],[[],["address",3]],[[]],[[]],[[]],[[],["ordering",4]],[[],["ordering",4]],[[["typecode",4]],["bool",15]],[[["parseerror",4]],["bool",15]],[[["receiver",4]],["bool",15]],[[["address",3]],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["typecode",4]],["bool",15]],[[["parseerror",4]],["bool",15]],[[["receiver",4]],["bool",15]],[[["address",3]],["bool",15]],[[],[["option",4,["ordering"]],["ordering",4]]],[[],[["option",4,["ordering"]],["ordering",4]]],[[],[["receiver",4],["vec",3,["receiver"]]]],[[]],[[]],[[]],[[]],[[],["string",3]],[[],["result",4]],[[["u32",15]],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["receiver",4],["vec",3,["receiver"]]],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],null,null,null,null,null,null,null,null,null,null],"p":[[4,"ParseError"],[4,"Network"],[3,"UnsupportedAddress"],[3,"ZcashAddress"],[8,"ToAddress"],[8,"FromAddress"],[13,"Unified"],[4,"ParseError"],[4,"Typecode"],[4,"Receiver"],[3,"Address"],[13,"DuplicateTypecode"],[13,"InvalidTypecodeValue"],[13,"InvalidEncoding"],[13,"Orchard"],[13,"Sapling"],[13,"P2pkh"],[13,"P2sh"],[13,"Unknown"],[13,"Unknown"]]},\
"zcash_client_backend":{"doc":"<em>A crate for implementing Zcash light clients.</em>","t":[3,12,0,11,11,0,5,11,11,11,0,11,12,11,11,0,12,12,12,0,12,11,11,11,11,0,0,0,4,13,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,8,16,16,16,3,3,3,16,8,8,12,10,12,12,10,12,11,11,11,11,11,11,0,12,12,11,11,11,11,11,11,11,11,11,0,11,11,11,10,10,10,10,10,11,10,10,10,11,10,10,11,11,11,11,11,11,10,12,12,12,12,10,10,10,10,0,12,11,11,11,11,11,11,12,12,11,11,11,12,11,11,11,0,10,5,5,13,13,4,4,13,13,13,13,13,13,13,13,13,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,12,12,12,12,12,12,12,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,17,5,5,5,5,5,5,5,5,5,5,5,0,3,3,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,12,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,12,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,11,11,11,11,11,11,11,11,12,3,13,13,4,13,3,3,3,3,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,12,11,12,12,12,12,12,12,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,16,8,10,5,10,13,13,4,3,3,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,5,5,12,11,11,12,12,0,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,17,5,5,5,5,5,5],"n":["DecryptedOutput","account","address","borrow","borrow_mut","data_api","decrypt_transaction","deref","deref_mut","drop","encoding","from","index","init","into","keys","memo","note","outgoing","proto","to","try_from","try_into","type_id","vzip","wallet","welding_rig","zip321","RecipientAddress","Shielded","Transparent","borrow","borrow_mut","clone","clone_into","decode","deref","deref_mut","drop","encode","eq","fmt","from","from","from","init","into","ne","to_owned","try_from","try_into","type_id","vzip","0","0","BlockSource","Error","Error","NoteRef","PrunedBlock","ReceivedTransaction","SentTransaction","TxRef","WalletRead","WalletWrite","account","advance_by_block","block_hash","block_height","block_height_extrema","block_time","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","chain","commitment_tree","created","deref","deref","deref","deref_mut","deref_mut","deref_mut","drop","drop","drop","error","from","from","from","get_address","get_balance_at","get_block_hash","get_commitment_tree","get_extended_full_viewing_keys","get_max_height_hash","get_memo","get_nullifiers","get_spendable_notes","get_target_and_anchor_heights","get_tx_height","get_witnesses","init","init","init","into","into","into","is_valid_account_extfvk","memo","output_index","outputs","recipient_address","rewind_to_height","select_spendable_notes","store_received_tx","store_sent_tx","testing","transactions","try_from","try_from","try_from","try_into","try_into","try_into","tx","tx","type_id","type_id","type_id","value","vzip","vzip","vzip","wallet","with_blocks","scan_cached_blocks","validate_chain","BlockHeightDiscontinuity","Builder","ChainInvalid","Error","InsufficientBalance","InvalidAmount","InvalidChain","InvalidExtSk","InvalidNewWitnessAnchor","InvalidWitnessAnchor","PrevHashMismatch","Protobuf","SaplingNotActive","ScanRequired","block_height_discontinuity","borrow","borrow","borrow_mut","borrow_mut","deref","deref","deref_mut","deref_mut","drop","drop","fmt","fmt","fmt","from","from","from","from","init","init","into","into","prev_hash_mismatch","source","to_string","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","0","0","0","0","0","0","0","0","1","1","1","1","2","3","MockBlockSource","MockWalletDb","advance_by_block","block_height_extrema","borrow","borrow","borrow_mut","borrow_mut","deref","deref","deref_mut","deref_mut","drop","drop","from","from","get_address","get_balance_at","get_block_hash","get_commitment_tree","get_extended_full_viewing_keys","get_memo","get_nullifiers","get_spendable_notes","get_tx_height","get_witnesses","init","init","into","into","is_valid_account_extfvk","rewind_to_height","select_spendable_notes","store_received_tx","store_sent_tx","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","with_blocks","ANCHOR_OFFSET","create_spend_to_address","decrypt_and_store_transaction","decode_extended_full_viewing_key","decode_extended_spending_key","decode_payment_address","decode_transparent_address","encode_extended_full_viewing_key","encode_extended_spending_key","encode_payment_address","encode_transparent_address","spending_key","compact_formats","CompactBlock","CompactOutput","CompactSpend","CompactTx","as_any","as_any","as_any","as_any","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_ref","as_ref","as_ref","as_ref","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","cached_size","cached_size","cached_size","cached_size","ciphertext","clear","clear","clear","clear","clear_ciphertext","clear_cmu","clear_epk","clear_fee","clear_hash","clear_hash","clear_header","clear_height","clear_index","clear_nf","clear_outputs","clear_prevHash","clear_protoVersion","clear_spends","clear_time","clear_vtx","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","cmu","cmu","compute_size","compute_size","compute_size","compute_size","default","default","default","default","default_instance","default_instance","default_instance","default_instance","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","descriptor","descriptor","descriptor","descriptor","descriptor_static","descriptor_static","descriptor_static","descriptor_static","drop","drop","drop","drop","ephemeral_key","epk","eq","eq","eq","eq","fee","file_descriptor_proto","fmt","fmt","fmt","fmt","from","from","from","from","from","get_cached_size","get_cached_size","get_cached_size","get_cached_size","get_ciphertext","get_cmu","get_epk","get_fee","get_hash","get_hash","get_header","get_height","get_index","get_nf","get_outputs","get_prevHash","get_protoVersion","get_spends","get_time","get_unknown_fields","get_unknown_fields","get_unknown_fields","get_unknown_fields","get_vtx","hash","hash","hash","header","header","height","height","index","init","init","init","init","into","into","into","into","into_any","into_any","into_any","into_any","is_initialized","is_initialized","is_initialized","is_initialized","merge_from","merge_from","merge_from","merge_from","mut_ciphertext","mut_cmu","mut_epk","mut_hash","mut_hash","mut_header","mut_nf","mut_outputs","mut_prevHash","mut_spends","mut_unknown_fields","mut_unknown_fields","mut_unknown_fields","mut_unknown_fields","mut_vtx","ne","ne","ne","ne","new","new","new","new","new","new","new","new","nf","nf","outputs","prevHash","prev_hash","protoVersion","set_ciphertext","set_cmu","set_epk","set_fee","set_hash","set_hash","set_header","set_height","set_index","set_nf","set_outputs","set_prevHash","set_protoVersion","set_spends","set_time","set_vtx","spends","take_ciphertext","take_cmu","take_epk","take_hash","take_hash","take_header","take_nf","take_outputs","take_prevHash","take_spends","take_vtx","time","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","txid","type_id","type_id","type_id","type_id","unknown_fields","unknown_fields","unknown_fields","unknown_fields","vtx","vzip","vzip","vzip","vzip","write_to_with_cached_sizes","write_to_with_cached_sizes","write_to_with_cached_sizes","write_to_with_cached_sizes","0","AccountId","Custom","Discard","OvkPolicy","Sender","SpendableNote","WalletShieldedOutput","WalletShieldedSpend","WalletTx","account","account","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone_into","cmu","conditional_select","default","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","diversifier","drop","drop","drop","drop","drop","drop","ephemeral_key","eq","fmt","from","from","from","from","from","from","hash","index","index","index","init","init","init","init","init","init","into","into","into","into","into","into","is_change","ne","nf","nf","note","note_value","num_outputs","num_spends","rseed","shielded_outputs","shielded_spends","to","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","txid","type_id","type_id","type_id","type_id","type_id","type_id","vzip","vzip","vzip","vzip","vzip","vzip","witness","witness","0","Nf","ScanningKey","nf","scan_block","try_decryption","InvalidBase64","MemoBytesError","MemoError","Payment","TransactionRequest","amount","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","deref","deref","deref","deref_mut","deref_mut","deref_mut","drop","drop","drop","eq","eq","fmt","fmt","fmt","from","from","from","from_uri","init","init","init","into","into","into","label","memo","memo_from_base64","memo_to_base64","message","ne","ne","other_params","recipient_address","testing","to_uri","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","vzip","vzip","vzip","0","0","VALID_PARAMNAME","arb_addr","arb_addr_str","arb_valid_memo","arb_zip321_payment","arb_zip321_request","arb_zip321_uri"],"q":["zcash_client_backend","","","","","","","","","","","","","","","","","","","","","","","","","","","","zcash_client_backend::address","","","","","","","","","","","","","","","","","","","","","","","","","zcash_client_backend::address::RecipientAddress","","zcash_client_backend::data_api","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","zcash_client_backend::data_api::chain","","zcash_client_backend::data_api::error","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","zcash_client_backend::data_api::error::ChainInvalid","zcash_client_backend::data_api::error::Error","","","","","","","","","","","","","zcash_client_backend::data_api::testing","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","zcash_client_backend::data_api::wallet","","","zcash_client_backend::encoding","","","","","","","","zcash_client_backend::keys","zcash_client_backend::proto","zcash_client_backend::proto::compact_formatszcash_client_backend::wallet","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","zcash_client_backend::wallet::OvkPolicy","zcash_client_backend::welding_rig","","","","","zcash_client_backend::zip321","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","zcash_client_backend::zip321::MemoError","","zcash_client_backend::zip321::testing","","","","","",""],"d":["A decrypted shielded output.","The account that decrypted the note.","Structs for handling supported address types.","","","Interfaces for wallet data persistence &amp; low-level wallet …","Scans a <code>Transaction</code> for any information that can be …","","","","Encoding and decoding functions for Zcash key and address …","","The index of the output within <code>shielded_outputs</code>.","","","Helper functions for managing light client key material.","The memo bytes included with the note.","The note within the output.","True if this output was recovered using an …","Generated code for handling light client protobuf structs.","The address the note was sent to.","","","","","Structs representing transaction data scanned from the …","Tools for scanning a compact representation of the Zcash …","Reference implementation of the ZIP-321 standard for …","An address that funds can be sent to.","","","","","","","","","","","","","","","","","","","","","","","","","","","This trait provides sequential access to raw blockchain …","The type of errors produced by a wallet backend.","","Backend-specific note identifier.","The subset of information that is relevant to this wallet …","A transaction that was detected during scanning of the …","A transaction that was constructed and sent by the wallet.","Backend-specific transaction identifier.","Read-only operations required for light wallet functions.","This trait encapsulates the write capabilities required to …","","","","","Returns the minimum and maximum block heights for stored …","","","","","","","","Tools for blockchain validation &amp; scanning","","","","","","","","","","","","Types for wallet error handling.","","","","Returns the payment address for the specified account, if …","Returns the wallet balance for an account as of the …","Returns the block hash for the block at the given height, …","Returns the note commitment tree at the specified block …","Returns all extended full viewing keys known about by this …","Returns the block hash for the block at the maximum height …","Returns the memo for a note.","Returns the unspent nullifiers, along with the account …","Return all spendable notes.","Returns the default target height (for the block in which …","Returns the block height in which the specified …","Returns the incremental witnesses as of the specified …","","","","","","","Checks whether the specified extended full viewing key is …","","The index within the transaction that contains the …","","","Rewinds the wallet database to the specified height.","Returns a list of spendable notes sufficient to cover the …","","","","","","","","","","","","","","","","","","","","Functions for scanning the chain and extracting relevant …","Scan the specified <code>limit</code> number of blocks from the …","Scans at most <code>limit</code> new blocks added to the cache for any …","Checks that the scanned blocks in the data database, when …","The block height field of the proposed new chain tip is …","An error occurred building a new transaction.","","","Unable to create a new spend because the wallet balance is …","The amount specified exceeds the allowed range.","Chain validation detected an error in the block at the …","A provided extsk is not associated with the specified …","The root of an output’s witness tree in a newly arrived …","The root of an output’s witness tree in a previously …","The hash of the parent block given by a proposed new chain …","An error occurred decoding a protobuf message.","The wallet attempted a sapling-only operation at a block …","The wallet must first perform a scan of the blockchain …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Creates a transaction paying the specified address from …","Scans a <code>Transaction</code> for any information that can be …","Decodes an <code>ExtendedFullViewingKey</code> from a Bech32-encoded …","Decodes an <code>ExtendedSpendingKey</code> from a Bech32-encoded …","Decodes a <code>PaymentAddress</code> from a Bech32-encoded string.","Decodes a <code>TransparentAddress</code> from a Base58Check-encoded …","Writes an <code>ExtendedFullViewingKey</code> as a Bech32-encoded …","Writes an <code>ExtendedSpendingKey</code> as a Bech32-encoded string.","Writes a <code>PaymentAddress</code> as a Bech32-encoded string.","Writes a <code>TransparentAddress</code> as a Base58Check-encoded …","Derives the ZIP 32 <code>ExtendedSpendingKey</code> for a given coin …","Generated file from <code>compact_formats.proto</code>","Generated files are compatible only with the same version …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the note commitment for this output.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the ephemeral public key for this output.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the <code>BlockHash</code> for this block.","","","Returns the <code>BlockHeader</code> for this block if present.","","Returns the <code>BlockHeight</code> value for this block","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the <code>BlockHash</code> for this block’s parent.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the transaction Id","","","","","","","","","","","","","","","","","","","A type-safe wrapper for account identifiers.","Use a custom outgoing viewing key. This might for instance …","Use no outgoing viewing key. Transaction outputs will be …","Describes a policy for which outgoing viewing key should …","Use the outgoing viewing key from the sender’s …","Information about a note that is tracked by the wallet …","A subset of an <code>OutputDescription</code> relevant to wallets and …","A subset of a <code>SpendDescription</code> relevant to wallets and …","A subset of a <code>Transaction</code> relevant to wallets and light …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The type of nullifier extracted when a note is successfully","A key that can be used to perform trial decryption and …","Produces the nullifier for the specified note and witness, …","Scans a <code>CompactBlock</code> with a set of <code>ScanningKey</code>s.","Attempts to decrypt a Sapling note and payment address …","","","Errors that may be produced in decoding of memos.","A single payment being requested.","A ZIP321 transaction request.","The amount of the payment that is being requested.","","","","","","","","","","","","","","","","","","","","","","","","Parse the provided URI to a payment request value.","","","","","","","A human-readable label for this payment within the larger …","A memo that, if included, must be provided with the …","Parse a <code>MemoBytes</code> value from a ZIP 321 compatible …","Converts a <code>MemoBytes</code> value to a ZIP 321 compatible …","A human-readable message to be displayed to the user …","","","A list of other arbitrary key/value pairs associated with …","The payment address to which the payment should be sent.","","Convert this request to a URI string.","","","","","","","","","","","","","","","","","","","","",""],"i":[0,1,0,1,1,0,0,1,1,1,0,1,1,1,1,0,1,1,1,0,1,1,1,1,1,0,0,0,0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,3,4,0,5,6,5,0,0,0,5,0,0,7,8,9,9,5,9,9,10,7,9,10,7,0,9,7,9,10,7,9,10,7,9,10,7,0,9,10,7,5,5,5,5,5,5,5,5,5,5,5,5,9,10,7,9,10,7,5,7,7,10,7,8,5,8,8,0,9,9,10,7,9,10,7,10,7,9,10,7,7,9,10,7,0,6,0,0,11,12,0,0,12,12,12,12,12,12,11,12,12,12,11,11,12,11,12,11,12,11,12,11,12,11,12,12,11,12,12,12,11,12,11,12,11,12,12,11,12,11,12,11,12,11,12,13,14,15,16,17,18,19,20,14,15,17,18,17,17,0,0,21,21,22,21,22,21,22,21,22,21,22,21,22,21,21,21,21,21,21,21,21,21,21,21,22,21,22,21,21,21,21,21,21,22,21,22,21,22,21,22,21,22,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,23,24,25,26,23,24,25,26,23,24,25,26,23,24,25,26,23,24,25,26,23,24,25,26,26,23,24,25,26,26,26,26,24,23,24,23,23,24,25,24,23,23,24,23,23,23,24,25,26,23,24,25,26,26,26,23,24,25,26,23,24,25,26,23,24,25,26,23,24,25,26,23,24,25,26,23,24,25,26,23,24,25,26,23,24,25,26,26,26,23,24,25,26,24,0,23,24,25,26,23,24,25,26,26,23,24,25,26,26,26,26,24,23,24,23,23,24,25,24,23,23,24,23,23,24,25,26,23,23,23,24,23,23,23,23,24,23,24,25,26,23,24,25,26,23,24,25,26,23,24,25,26,23,24,25,26,26,26,26,23,24,23,25,24,23,24,23,24,25,26,23,23,24,25,26,23,23,24,24,25,25,26,26,25,25,24,23,23,23,26,26,26,24,23,24,23,23,24,25,24,23,23,24,23,23,24,26,26,26,23,24,23,25,24,23,24,23,23,23,24,25,26,23,24,25,26,23,24,25,26,24,23,24,25,26,23,24,25,26,23,23,24,25,26,23,24,25,26,27,0,28,28,0,28,0,0,0,0,29,30,31,29,30,32,28,27,31,29,30,32,28,27,27,27,30,27,27,31,29,30,32,28,27,31,29,30,32,28,27,32,31,29,30,32,28,27,30,27,27,31,29,30,32,28,27,27,31,29,30,31,29,30,32,28,27,31,29,30,32,28,27,30,27,29,30,30,32,31,31,32,31,31,30,27,31,29,30,32,28,27,31,29,30,32,28,27,31,31,29,30,32,28,27,31,29,30,32,28,27,30,32,33,34,0,34,0,34,35,35,0,0,0,36,35,36,37,35,36,37,35,36,37,35,36,37,35,36,37,36,37,35,36,37,35,36,37,37,35,36,37,35,36,37,36,36,0,0,36,36,37,36,36,0,37,35,36,37,35,36,37,35,36,37,35,36,37,38,39,0,0,0,0,0,0,0],"f":[null,null,null,[[]],[[]],null,[[["blockheight",3],["transaction",3],["hashmap",3]],[["decryptedoutput",3],["vec",3,["decryptedoutput"]]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],null,[[]],null,[[],["usize",15]],[[]],null,null,null,null,null,null,[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],null,null,null,null,null,null,[[]],[[]],[[],["recipientaddress",4]],[[]],[[["str",15]],["option",4]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[],["string",3]],[[["recipientaddress",4]],["bool",15]],[[["formatter",3]],["result",6]],[[]],[[["paymentaddress",3]]],[[["transparentaddress",4]]],[[],["usize",15]],[[]],[[["recipientaddress",4]],["bool",15]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],null,null,null,null,null,null,null,null,null,null,null,null,null,[[["prunedblock",3]],[["vec",3],["result",4,["vec"]]]],null,null,[[],[["result",4,["option"]],["option",4]]],null,[[]],[[]],[[]],[[]],[[]],[[]],null,null,null,[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],null,[[]],[[]],[[]],[[["accountid",3]],[["result",4,["option"]],["option",4,["paymentaddress"]]]],[[["blockheight",3],["accountid",3]],[["result",4,["amount"]],["amount",3]]],[[["blockheight",3]],[["result",4,["option"]],["option",4,["blockhash"]]]],[[["blockheight",3]],[["result",4,["option"]],["option",4,["commitmenttree"]]]],[[],[["result",4,["hashmap"]],["hashmap",3,["accountid","extendedfullviewingkey"]]]],[[],[["option",4],["result",4,["option"]]]],[[],[["memo",4],["result",4,["memo"]]]],[[],[["result",4,["vec"]],["vec",3]]],[[["blockheight",3],["accountid",3]],[["result",4,["vec"]],["vec",3,["spendablenote"]]]],[[],[["result",4,["option"]],["option",4]]],[[["txid",3]],[["option",4,["blockheight"]],["result",4,["option"]]]],[[["blockheight",3]],[["vec",3],["result",4,["vec"]]]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[]],[[]],[[]],[[["extendedfullviewingkey",3],["accountid",3]],[["bool",15],["result",4,["bool"]]]],null,null,null,null,[[["blockheight",3]],["result",4]],[[["amount",3],["blockheight",3],["accountid",3]],[["result",4,["vec"]],["vec",3,["spendablenote"]]]],[[["receivedtransaction",3]],["result",4]],[[["senttransaction",3]],["result",4]],null,null,[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],null,null,[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],null,[[]],[[]],[[]],null,[[["blockheight",3],["option",4,["u32"]],["u32",15]],["result",4]],[[["option",4,["u32"]],["u32",15]],["result",4]],[[["option",4]],["result",4]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["blockheight",3]],["error",4]],[[]],[[]],[[]],[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[["error",4]]],[[]],[[["protobuferror",4]]],[[],["usize",15]],[[],["usize",15]],[[]],[[]],[[["blockheight",3]],["error",4]],[[],[["error",8],["option",4,["error"]]]],[[],["string",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[]],[[]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["prunedblock",3]],[["vec",3],["result",4,["vec"]]]],[[],[["result",4,["option"]],["option",4]]],[[]],[[]],[[]],[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[["accountid",3]],[["result",4,["option"]],["option",4,["paymentaddress"]]]],[[["blockheight",3],["accountid",3]],[["result",4,["amount"]],["amount",3]]],[[["blockheight",3]],[["result",4,["option"]],["option",4,["blockhash"]]]],[[["blockheight",3]],[["result",4,["option"]],["option",4,["commitmenttree"]]]],[[],[["result",4,["hashmap"]],["hashmap",3,["accountid","extendedfullviewingkey"]]]],[[],[["memo",4],["result",4,["memo"]]]],[[],[["result",4,["vec"]],["vec",3]]],[[["blockheight",3],["accountid",3]],[["result",4,["vec"]],["vec",3,["spendablenote"]]]],[[["txid",3]],[["option",4,["blockheight"]],["result",4,["option"]]]],[[["blockheight",3]],[["vec",3],["result",4,["vec"]]]],[[],["usize",15]],[[],["usize",15]],[[]],[[]],[[["extendedfullviewingkey",3],["accountid",3]],[["bool",15],["result",4,["bool"]]]],[[["blockheight",3]],["result",4]],[[["amount",3],["blockheight",3],["accountid",3]],[["result",4,["vec"]],["vec",3,["spendablenote"]]]],[[["receivedtransaction",3]],["result",4]],[[["senttransaction",3]],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[]],[[]],[[["blockheight",3],["option",4,["u32"]],["u32",15]],["result",4]],null,[[["memobytes",3],["recipientaddress",4],["extendedspendingkey",3],["accountid",3],["amount",3],["option",4,["memobytes"]],["ovkpolicy",4]],["result",4]],[[["transaction",3]],["result",4]],[[["str",15]],[["option",4,["extendedfullviewingkey"]],["result",4,["option","error"]],["error",4]]],[[["str",15]],[["result",4,["option","error"]],["option",4,["extendedspendingkey"]],["error",4]]],[[["str",15]],[["error",4],["option",4,["paymentaddress"]],["result",4,["option","error"]]]],[[["str",15]],[["bs58error",4],["result",4,["option","bs58error"]],["option",4,["transparentaddress"]]]],[[["str",15],["extendedfullviewingkey",3]],["string",3]],[[["str",15],["extendedspendingkey",3]],["string",3]],[[["str",15],["paymentaddress",3]],["string",3]],[[["transparentaddress",4]],["string",3]],[[["u32",15]],["extendedspendingkey",3]],null,null,null,null,null,[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["reflectvalueref",4]],[[],["reflectvalueref",4]],[[],["reflectvalueref",4]],[[],["reflectvalueref",4]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["compactblock",3]],[[],["compacttx",3]],[[],["compactspend",3]],[[],["compactoutput",3]],[[]],[[]],[[]],[[]],[[],[["result",4,["scalar"]],["scalar",3]]],null,[[],["u32",15]],[[],["u32",15]],[[],["u32",15]],[[],["u32",15]],[[],["compactblock",3]],[[],["compacttx",3]],[[],["compactspend",3]],[[],["compactoutput",3]],[[],["compactblock",3]],[[],["compacttx",3]],[[],["compactspend",3]],[[],["compactoutput",3]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[],["messagedescriptor",3]],[[],["messagedescriptor",3]],[[],["messagedescriptor",3]],[[],["messagedescriptor",3]],[[],["messagedescriptor",3]],[[],["messagedescriptor",3]],[[],["messagedescriptor",3]],[[],["messagedescriptor",3]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[],[["result",4,["ephemeralkeybytes"]],["ephemeralkeybytes",3]]],null,[[["compactblock",3]],["bool",15]],[[["compacttx",3]],["bool",15]],[[["compactspend",3]],["bool",15]],[[["compactoutput",3]],["bool",15]],null,[[],["filedescriptorproto",3]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[["outputdescription",3]],["compactoutput",3]],[[],["u32",15]],[[],["u32",15]],[[],["u32",15]],[[],["u32",15]],[[]],[[]],[[]],[[],["u32",15]],[[]],[[]],[[]],[[],["u64",15]],[[],["u64",15]],[[]],[[]],[[]],[[],["u32",15]],[[]],[[],["u32",15]],[[],["unknownfields",3]],[[],["unknownfields",3]],[[],["unknownfields",3]],[[],["unknownfields",3]],[[]],[[],["blockhash",3]],null,null,[[],[["option",4,["blockheader"]],["blockheader",3]]],null,[[],["blockheight",3]],null,null,[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[]],[[]],[[]],[[]],[[["box",3]],[["any",8],["box",3,["any"]]]],[[["box",3]],[["any",8],["box",3,["any"]]]],[[["box",3]],[["any",8],["box",3,["any"]]]],[[["box",3]],[["any",8],["box",3,["any"]]]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[["codedinputstream",3]],["protobufresult",6]],[[["codedinputstream",3]],["protobufresult",6]],[[["codedinputstream",3]],["protobufresult",6]],[[["codedinputstream",3]],["protobufresult",6]],[[],["vec",3]],[[],["vec",3]],[[],["vec",3]],[[],["vec",3]],[[],["vec",3]],[[],["vec",3]],[[],["vec",3]],[[],["repeatedfield",3]],[[],["vec",3]],[[],["repeatedfield",3]],[[],["unknownfields",3]],[[],["unknownfields",3]],[[],["unknownfields",3]],[[],["unknownfields",3]],[[],["repeatedfield",3]],[[["compactblock",3]],["bool",15]],[[["compacttx",3]],["bool",15]],[[["compactspend",3]],["bool",15]],[[["compactoutput",3]],["bool",15]],[[],["compactblock",3]],[[],["compactblock",3]],[[],["compacttx",3]],[[],["compacttx",3]],[[],["compactspend",3]],[[],["compactspend",3]],[[],["compactoutput",3]],[[],["compactoutput",3]],[[],[["result",4,["nullifier"]],["nullifier",3]]],null,null,null,[[],["blockhash",3]],null,[[["vec",3,["u8"]],["u8",15]]],[[["vec",3,["u8"]],["u8",15]]],[[["vec",3,["u8"]],["u8",15]]],[[["u32",15]]],[[["vec",3,["u8"]],["u8",15]]],[[["vec",3,["u8"]],["u8",15]]],[[["vec",3,["u8"]],["u8",15]]],[[["u64",15]]],[[["u64",15]]],[[["vec",3,["u8"]],["u8",15]]],[[["compactoutput",3],["repeatedfield",3,["compactoutput"]]]],[[["vec",3,["u8"]],["u8",15]]],[[["u32",15]]],[[["repeatedfield",3,["compactspend"]],["compactspend",3]]],[[["u32",15]]],[[["compacttx",3],["repeatedfield",3,["compacttx"]]]],null,[[],[["vec",3,["u8"]],["u8",15]]],[[],[["vec",3,["u8"]],["u8",15]]],[[],[["vec",3,["u8"]],["u8",15]]],[[],[["vec",3,["u8"]],["u8",15]]],[[],[["vec",3,["u8"]],["u8",15]]],[[],[["vec",3,["u8"]],["u8",15]]],[[],[["vec",3,["u8"]],["u8",15]]],[[],[["compactoutput",3],["repeatedfield",3,["compactoutput"]]]],[[],[["vec",3,["u8"]],["u8",15]]],[[],[["repeatedfield",3,["compactspend"]],["compactspend",3]]],[[],[["compacttx",3],["repeatedfield",3,["compacttx"]]]],null,[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["txid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],null,null,null,null,null,[[]],[[]],[[]],[[]],[[["codedoutputstream",3]],["protobufresult",6]],[[["codedoutputstream",3]],["protobufresult",6]],[[["codedoutputstream",3]],["protobufresult",6]],[[["codedoutputstream",3]],["protobufresult",6]],null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["accountid",3]],[[]],null,[[["choice",3]]],[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],null,[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],null,[[["accountid",3]],["bool",15]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,null,null,[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[]],[[]],[[]],[[]],[[]],[[]],null,[[["accountid",3]],["bool",15]],null,null,null,null,null,null,null,null,null,null,[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],null,[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],null,null,null,null,null,[[["note",3],["incrementalwitness",3]]],[[["compactblock",3],["commitmenttree",3]],[["wallettx",3],["vec",3,["wallettx"]]]],[[["blockheight",3]],["option",4]],null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["payment",3]],["bool",15]],[[["transactionrequest",3]],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[["str",15]],[["result",4,["string"]],["string",3]]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[]],[[]],[[]],null,null,[[["str",15]],[["memobytes",3],["result",4,["memobytes","memoerror"]],["memoerror",4]]],[[["memobytes",3]],["string",3]],null,[[["payment",3]],["bool",15]],[[["transactionrequest",3]],["bool",15]],null,null,null,[[],[["option",4,["string"]],["string",3]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[]],[[]],[[]],null,null,null,[[]],[[]],[[]],[[]],[[]],[[]]],"p":[[3,"DecryptedOutput"],[4,"RecipientAddress"],[13,"Shielded"],[13,"Transparent"],[8,"WalletRead"],[8,"BlockSource"],[3,"SentTransaction"],[8,"WalletWrite"],[3,"PrunedBlock"],[3,"ReceivedTransaction"],[4,"ChainInvalid"],[4,"Error"],[13,"BlockHeightDiscontinuity"],[13,"InsufficientBalance"],[13,"InvalidChain"],[13,"InvalidExtSk"],[13,"InvalidNewWitnessAnchor"],[13,"InvalidWitnessAnchor"],[13,"Builder"],[13,"Protobuf"],[3,"MockWalletDb"],[3,"MockBlockSource"],[3,"CompactBlock"],[3,"CompactTx"],[3,"CompactSpend"],[3,"CompactOutput"],[3,"AccountId"],[4,"OvkPolicy"],[3,"WalletShieldedSpend"],[3,"WalletShieldedOutput"],[3,"WalletTx"],[3,"SpendableNote"],[13,"Custom"],[8,"ScanningKey"],[4,"MemoError"],[3,"Payment"],[3,"TransactionRequest"],[13,"InvalidBase64"],[13,"MemoBytesError"]]},\
"zcash_client_sqlite":{"doc":"<em>An SQLite-based Zcash light client.</em>","t":[3,3,4,13,13,3,11,11,11,11,11,11,11,11,11,11,11,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,11,12,12,0,5,5,13,13,13,13,13,13,13,13,13,13,4,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,8,10,5,5,5,5,5,5,5,5,5,5,5,5,10,0,5,5,5,10,5,5,10,10,10,5,5,5,5,5,5,10,0,5,5,5,5,5,5],"n":["BlockDb","DataConnStmtCache","NoteId","ReceivedNoteId","SentNoteId","WalletDb","advance_by_block","block_height_extrema","block_height_extrema","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","chain","clone","clone_into","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","drop","drop","drop","drop","error","fmt","fmt","for_path","for_path","from","from","from","from","get_address","get_address","get_balance_at","get_balance_at","get_block_hash","get_block_hash","get_commitment_tree","get_commitment_tree","get_extended_full_viewing_keys","get_extended_full_viewing_keys","get_memo","get_memo","get_nullifiers","get_nullifiers","get_spendable_notes","get_spendable_notes","get_tx_height","get_tx_height","get_update_ops","get_witnesses","get_witnesses","init","init","init","init","into","into","into","into","is_valid_account_extfvk","is_valid_account_extfvk","rewind_to_height","select_spendable_notes","select_spendable_notes","store_received_tx","store_sent_tx","to_owned","to_string","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","vzip","vzip","vzip","vzip","wallet","with_blocks","0","0","init","with_blocks","init_cache_database","BackendError","Base58","Bech32","CorruptedData","DbError","IncorrectHrpExtFvk","InvalidMemo","InvalidNote","InvalidNoteId","Io","SqliteClientError","TableNotEmpty","borrow","borrow_mut","deref","deref_mut","drop","fmt","fmt","from","from","from","from","from","from","from","init","into","source","to_string","try_from","try_into","type_id","vzip","0","0","0","0","0","0","0","ShieldedOutput","account","block_height_extrema","get_address","get_balance","get_balance_at","get_block_hash","get_commitment_tree","get_extended_full_viewing_keys","get_nullifiers","get_received_memo","get_sent_memo","get_tx_height","get_witnesses","index","init","insert_block","insert_sent_note","insert_witness","is_change","is_valid_account_extfvk","mark_spent","memo","note","nullifier","prune_witnesses","put_received_note","put_sent_note","put_tx_data","put_tx_meta","rewind_to_height","to","transact","update_expired_notes","init_accounts_table","init_blocks_table","init_wallet_db","get_spendable_notes","select_spendable_notes"],"q":["zcash_client_sqlite","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","zcash_client_sqlite::NoteId","","zcash_client_sqlite::chain","","zcash_client_sqlite::chain::init","zcash_client_sqlite::error","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","zcash_client_sqlite::error::SqliteClientError","","","","","","","zcash_client_sqlite::wallet","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","zcash_client_sqlite::wallet::init","","","zcash_client_sqlite::wallet::transact",""],"d":["A wrapper for the SQLite connection to the block cache …","The primary type used to implement <code>WalletWrite</code> for the …","A newtype wrapper for sqlite primary key values for the …","","","A wrapper for the SQLite connection to the wallet database.","","","","","","","","","","","","Functions for enforcing chain validity and handling chain …","","","","","","","","","","","","","","","Error types for problems that may arise when reading or …","","","Construct a connection to the wallet database stored at …","Opens a connection to the wallet database stored at the …","","","","","","","","","","","","","","","","","","","","","","","Given a wallet database connection, obtain a handle for …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Functions for querying information in the wdb database.","","","","Functions for initializing the various databases.","Implements a traversal of <code>limit</code> blocks of the block cache …","Sets up the internal structure of the cache database.","Wrapper for errors from zcash_client_backend","Base58 decoding error","Bech32 decoding error","Decoding of a stored value from its serialized form has …","Wrapper for rusqlite errors.","Decoding of the extended full viewing key has failed (for …","A received memo cannot be interpreted as a UTF-8 string.","The rcm value for a note cannot be decoded to a valid …","The note id associated with a witness being stored …","Wrapper for errors from the IO subsystem","The primary error type for the SQLite wallet backend.","Illegal attempt to reinitialize an already-initialized …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","This trait provides a generalization over shielded output …","","Returns the minimum and maximum heights for blocks stored …","Returns the address for the account.","Returns the balance for the account, including all mined …","Returns the verified balance for the account at the …","Returns the block hash for the block at the specified …","Returns the commitment tree for the block at the specified …","Returns the <code>ExtendedFullViewingKey</code>s for the wallet.","Retrieve the nullifiers for notes that the wallet is …","Returns the memo for a received note.","Returns the memo for a sent note.","Returns the block height at which the specified …","Returns the incremental witnesses for the block at the …","","Functions for initializing the various databases.","Inserts information about a scanned block into the …","Inserts a sent note into the wallet database.","Records the incremental witness for the specified note, as …","","Checks whether the specified <code>ExtendedFullViewingKey</code> is …","Marks a given nullifier as having been revealed in the …","","","","Removes old incremental witnesses up to the given block …","Records the specified shielded output as having been …","Records information about a note that your wallet created.","Inserts full transaction data into the database.","Inserts information about a mined transaction that was …","Rewinds the database to the given height.","","Functions for creating transactions.","Marks notes that have not been mined in transactions as …","Initialises the data database with the given …","Initialises the data database with the given block.","Sets up the internal structure of the data database.","",""],"i":[0,0,0,1,1,0,2,3,2,3,2,4,1,3,2,4,1,0,1,1,3,2,4,1,3,2,4,1,3,2,4,1,0,1,1,3,4,3,2,4,1,3,2,3,2,3,2,3,2,3,2,3,2,3,2,3,2,3,2,3,3,2,3,2,4,1,3,2,4,1,3,2,2,3,2,2,2,1,1,3,2,4,1,3,2,4,1,3,2,4,1,3,2,4,1,0,4,5,6,0,0,0,7,7,7,7,7,7,7,7,7,7,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,8,9,10,11,12,13,14,0,15,0,0,0,0,0,0,0,0,0,0,0,0,15,0,0,0,0,15,0,0,15,15,15,0,0,0,0,0,0,15,0,0,0,0,0,0,0],"f":[null,null,null,null,null,null,[[["prunedblock",3]],[["vec",3],["result",4,["vec"]]]],[[],[["result",4,["option"]],["option",4]]],[[],[["result",4,["option"]],["option",4]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,[[],["noteid",4]],[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],null,[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["asref",8,["path"]],["path",3]],[["error",4],["result",4,["error"]]]],[[["asref",8,["path"]],["path",3]],[["error",4],["result",4,["error"]]]],[[]],[[]],[[]],[[]],[[["accountid",3]],[["result",4,["option"]],["option",4,["paymentaddress"]]]],[[["accountid",3]],[["result",4,["option"]],["option",4,["paymentaddress"]]]],[[["accountid",3],["blockheight",3]],[["amount",3],["result",4,["amount"]]]],[[["accountid",3],["blockheight",3]],[["amount",3],["result",4,["amount"]]]],[[["blockheight",3]],[["result",4,["option"]],["option",4,["blockhash"]]]],[[["blockheight",3]],[["result",4,["option"]],["option",4,["blockhash"]]]],[[["blockheight",3]],[["result",4,["option"]],["option",4,["commitmenttree"]]]],[[["blockheight",3]],[["result",4,["option"]],["option",4,["commitmenttree"]]]],[[],[["result",4,["hashmap"]],["hashmap",3,["accountid","extendedfullviewingkey"]]]],[[],[["result",4,["hashmap"]],["hashmap",3,["accountid","extendedfullviewingkey"]]]],[[],[["memo",4],["result",4,["memo"]]]],[[],[["memo",4],["result",4,["memo"]]]],[[],[["result",4,["vec"]],["vec",3]]],[[],[["result",4,["vec"]],["vec",3]]],[[["accountid",3],["blockheight",3]],[["vec",3,["spendablenote"]],["result",4,["vec"]]]],[[["accountid",3],["blockheight",3]],[["vec",3,["spendablenote"]],["result",4,["vec"]]]],[[["txid",3]],[["option",4,["blockheight"]],["result",4,["option"]]]],[[["txid",3]],[["option",4,["blockheight"]],["result",4,["option"]]]],[[],[["sqliteclienterror",4],["result",4,["dataconnstmtcache","sqliteclienterror"]],["dataconnstmtcache",3]]],[[["blockheight",3]],[["vec",3],["result",4,["vec"]]]],[[["blockheight",3]],[["vec",3],["result",4,["vec"]]]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[]],[[]],[[]],[[]],[[["extendedfullviewingkey",3],["accountid",3]],[["result",4,["bool"]],["bool",15]]],[[["extendedfullviewingkey",3],["accountid",3]],[["result",4,["bool"]],["bool",15]]],[[["blockheight",3]],["result",4]],[[["accountid",3],["blockheight",3],["amount",3]],[["vec",3,["spendablenote"]],["result",4,["vec"]]]],[[["accountid",3],["blockheight",3],["amount",3]],[["vec",3,["spendablenote"]],["result",4,["vec"]]]],[[["receivedtransaction",3]],["result",4]],[[["senttransaction",3]],["result",4]],[[]],[[],["string",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[]],[[]],[[]],[[]],null,[[["u32",15],["blockheight",3],["option",4,["u32"]]],["result",4]],null,null,null,[[["u32",15],["blockdb",3],["blockheight",3],["option",4,["u32"]]],[["sqliteclienterror",4],["result",4,["sqliteclienterror"]]]],[[["blockdb",3]],[["error",4],["result",4,["error"]]]],null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["noteid",4],["error",4,["noteid"]]]],[[["error",4]]],[[["error",3]]],[[["error",4]]],[[["error",4]]],[[]],[[["error",4]]],[[],["usize",15]],[[]],[[],[["option",4,["error"]],["error",8]]],[[],["string",3]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],null,null,null,null,null,null,null,null,[[],["accountid",3]],[[["walletdb",3]],[["error",4],["result",4,["option","error"]],["option",4]]],[[["accountid",3],["walletdb",3]],[["option",4,["paymentaddress"]],["sqliteclienterror",4],["result",4,["option","sqliteclienterror"]]]],[[["accountid",3],["walletdb",3]],[["result",4,["amount","sqliteclienterror"]],["sqliteclienterror",4],["amount",3]]],[[["accountid",3],["walletdb",3],["blockheight",3]],[["result",4,["amount","sqliteclienterror"]],["sqliteclienterror",4],["amount",3]]],[[["walletdb",3],["blockheight",3]],[["error",4],["result",4,["option","error"]],["option",4,["blockhash"]]]],[[["walletdb",3],["blockheight",3]],[["sqliteclienterror",4],["result",4,["option","sqliteclienterror"]],["option",4,["commitmenttree"]]]],[[["walletdb",3]],[["hashmap",3,["accountid","extendedfullviewingkey"]],["sqliteclienterror",4],["result",4,["hashmap","sqliteclienterror"]]]],[[["walletdb",3]],[["result",4,["vec","sqliteclienterror"]],["vec",3],["sqliteclienterror",4]]],[[["walletdb",3],["i64",15]],[["result",4,["memo","sqliteclienterror"]],["memo",4],["sqliteclienterror",4]]],[[["walletdb",3],["i64",15]],[["result",4,["memo","sqliteclienterror"]],["memo",4],["sqliteclienterror",4]]],[[["walletdb",3],["txid",3]],[["option",4,["blockheight"]],["error",4],["result",4,["option","error"]]]],[[["walletdb",3],["blockheight",3]],[["result",4,["vec","sqliteclienterror"]],["vec",3],["sqliteclienterror",4]]],[[],["usize",15]],null,[[["commitmenttree",3],["u32",15],["blockhash",3],["dataconnstmtcache",3],["blockheight",3]],[["sqliteclienterror",4],["result",4,["sqliteclienterror"]]]],[[["i64",15],["accountid",3],["recipientaddress",4],["usize",15],["memobytes",3],["dataconnstmtcache",3],["option",4,["memobytes"]],["amount",3]],[["sqliteclienterror",4],["result",4,["sqliteclienterror"]]]],[[["incrementalwitness",3],["dataconnstmtcache",3],["blockheight",3],["i64",15]],[["sqliteclienterror",4],["result",4,["sqliteclienterror"]]]],[[],[["option",4,["bool"]],["bool",15]]],[[["extendedfullviewingkey",3],["accountid",3],["walletdb",3]],[["sqliteclienterror",4],["result",4,["bool","sqliteclienterror"]],["bool",15]]],[[["dataconnstmtcache",3],["nullifier",3],["i64",15]],[["sqliteclienterror",4],["result",4,["sqliteclienterror"]]]],[[],[["memobytes",3],["option",4,["memobytes"]]]],[[],["note",3]],[[],[["option",4,["nullifier"]],["nullifier",3]]],[[["dataconnstmtcache",3],["blockheight",3]],[["sqliteclienterror",4],["result",4,["sqliteclienterror"]]]],[[["dataconnstmtcache",3],["i64",15]],[["noteid",4],["result",4,["noteid","sqliteclienterror"]],["sqliteclienterror",4]]],[[["i64",15],["dataconnstmtcache",3],["decryptedoutput",3]],[["sqliteclienterror",4],["result",4,["sqliteclienterror"]]]],[[["transaction",3],["option",4,["offsetdatetime"]],["offsetdatetime",3],["dataconnstmtcache",3]],[["i64",15],["sqliteclienterror",4],["result",4,["i64","sqliteclienterror"]]]],[[["dataconnstmtcache",3],["wallettx",3],["blockheight",3]],[["i64",15],["sqliteclienterror",4],["result",4,["i64","sqliteclienterror"]]]],[[["walletdb",3],["blockheight",3]],[["sqliteclienterror",4],["result",4,["sqliteclienterror"]]]],[[],["paymentaddress",3]],null,[[["dataconnstmtcache",3],["blockheight",3]],[["sqliteclienterror",4],["result",4,["sqliteclienterror"]]]],[[["walletdb",3]],[["sqliteclienterror",4],["result",4,["sqliteclienterror"]]]],[[["u32",15],["blockhash",3],["walletdb",3],["blockheight",3]],[["sqliteclienterror",4],["result",4,["sqliteclienterror"]]]],[[["walletdb",3]],[["error",4],["result",4,["error"]]]],[[["accountid",3],["walletdb",3],["blockheight",3]],[["result",4,["vec","sqliteclienterror"]],["sqliteclienterror",4],["vec",3,["spendablenote"]]]],[[["blockheight",3],["accountid",3],["walletdb",3],["amount",3]],[["result",4,["vec","sqliteclienterror"]],["sqliteclienterror",4],["vec",3,["spendablenote"]]]]],"p":[[4,"NoteId"],[3,"DataConnStmtCache"],[3,"WalletDb"],[3,"BlockDb"],[13,"SentNoteId"],[13,"ReceivedNoteId"],[4,"SqliteClientError"],[13,"CorruptedData"],[13,"Bech32"],[13,"Base58"],[13,"DbError"],[13,"Io"],[13,"InvalidMemo"],[13,"BackendError"],[8,"ShieldedOutput"]]},\
"zcash_encoding":{"doc":"<em>Zcash binary encodings.</em>","t":[3,3,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["Array","CompactSize","Optional","Vector","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","from","from","from","from","into","into","into","into","read","read","read","read","read_t","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","write","write","write","write","write_nonempty"],"q":["zcash_encoding","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["Namespace for functions that perform encoding of array …","Namespace for functions for compact encoding of integers.","Namespace for functions that perform encoding of <code>Option</code> …","Namespace for functions that perform encoding of vectors.","","","","","","","","","","","","","","","","","Reads an integer encoded in compact form.","Reads a vector, assuming the encoding written by …","Reads a vector, assuming the encoding written by …","Reads an optional value, assuming the encoding written by …","Reads an integer encoded in contact form and performs …","","","","","","","","","","","","","Writes the provided <code>usize</code> value to the provided Writer in …","Writes a slice of values by writing <code>CompactSize</code>-encoded …","Writes an iterator full of values to a stream by …","Writes an optional value to a stream by writing a flag …","Writes a NonEmpty container of values to the stream using …"],"i":[0,0,0,0,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,2],"f":[null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["read",8]],[["result",6,["u64"]],["u64",15]]],[[["read",8]],[["result",6,["vec"]],["vec",3]]],[[["read",8],["usize",15]],[["result",6,["vec"]],["vec",3]]],[[["read",8]],[["option",4],["result",6,["option"]]]],[[["read",8]],[["u64",15],["tryfrom",8,["u64"]],["result",6]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[["usize",15],["write",8]],["result",6]],[[["write",8]],["result",6]],[[["write",8],["intoiterator",8]],["result",6]],[[["option",4],["write",8]],["result",6]],[[["write",8],["nonempty",3]],["result",6]]],"p":[[3,"CompactSize"],[3,"Vector"],[3,"Array"],[3,"Optional"]]},\
"zcash_extensions":{"doc":"","t":[0,0,0,3,13,17,8,16,4,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,10,11,11,11,0,13,13,13,13,8,4,3,4,13,13,13,13,13,13,13,13,13,13,13,4,13,3,13,4,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,12,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,12,12,12,12,12,12],"n":["consensus","transparent","transparent","Context","Demo","EXTENSION_DEMO","Epoch","Error","ExtensionId","InvalidExtId","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone_into","deref","deref","deref","deref_mut","deref_mut","deref_mut","drop","drop","drop","epoch_for_branch","fmt","from","from","from","height","init","init","init","into","into","into","is_tze_only","new","to_owned","try_from","try_from","try_from","try_from","try_into","try_into","try_into","tx","tx_tze_outputs","type_id","type_id","type_id","verify","vzip","vzip","vzip","demo","BaseBuilderError","Close","Close","CloseMismatch","Context","DemoBuildError","DemoBuilder","Error","ExpectedClose","ExpectedClose","ExpectedOpen","HashMismatch","IllegalPayloadLength","InvalidOutputQty","ModeInvalid","ModeMismatch","NonTzeTxn","Open","Open","Precondition","PrevoutParseFailure","Program","TransferMismatch","Witness","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","close","close","demo_close","demo_open","demo_transfer_to_close","deref","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","drop","drop","drop","drop","drop","drop","eq","eq","eq","extension_id","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from_payload","from_payload","init","init","init","init","init","init","into","into","into","into","into","into","is_tze_only","ne","ne","ne","open","open","to_payload","to_payload","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","tx_tze_outputs","txn_builder","type_id","type_id","type_id","type_id","type_id","type_id","verify_inner","vzip","vzip","vzip","vzip","vzip","vzip","0","0","actual","actual","expected","expected","0","0","0","0","0","0","0"],"q":["zcash_extensions","","zcash_extensions::consensus","zcash_extensions::consensus::transparent","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","zcash_extensions::transparent","zcash_extensions::transparent::demo","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","zcash_extensions::transparent::demo::DemoBuildError","","","","","","zcash_extensions::transparent::demo::Error","","","zcash_extensions::transparent::demo::Precondition","","zcash_extensions::transparent::demo::Witness",""],"d":["","Zcash transparent extensions.","Consensus logic for Transparent Zcash Extensions.","The complete set of context data that is available to any …","","Wire value for the demo extension identifier.","Implementations of this trait provide complete extension …","","The set of programs that have assigned type IDs within the …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","For a specific epoch, if the extension ID and mode of the …","","","","Demo implementation of TZE consensus rules.","Wrapper for errors returned from the underlying <code>Builder</code>","","","","This trait defines the context information that the demo …","Errors that can occur in construction of transactions …","Wrapper for <code>zcash_primitives::transaction::builder::Builder</code>…","Errors that may be produced during parsing and …","Verification error indicating that an <code>Open</code>-mode …","","","Verification error indicating that the witness being …","Parse error indicating that the payload of the condition …","Verification error indicating that an unexpected number of …","Verification error indicating that the specified mode was …","Verification error indicating that the mode requested by …","Verification error indicating that the transaction …","","","The precondition type for the demo extension.","","Marker type for the demo extension.","","The witness type for the demo extension.","","","","","","","","","","","","","Convenience constructor for closing precondition values.","","Add a channel-closing witness to the transaction under …","Add a channel-opening precondition to the outputs of the …","Add a witness to a previous channel-opening precondition …","","","","","","","","","","","","","","","","","","","","","","","","The assigned identifier for this extension. This is …","","","","","","","","","","","","","","","","","","","","","","","","","","Predicate used to determine whether this transaction has …","","","","Convenience constructor for opening precondition values.","","","","","","","","","","","","","","","","","","","List of all TZE outputs in the transaction being validate …","The wrapped transaction builder.","","","","","","","Runs the program against the given precondition, witness, …","","","","","","","","","","","","","","","","","","",""],"i":[0,0,0,0,1,0,0,2,0,0,3,4,1,3,4,1,1,1,3,4,1,3,4,1,3,4,1,0,1,3,4,1,4,3,4,1,3,4,1,4,4,1,3,4,1,1,3,4,1,4,4,3,4,1,2,3,4,1,0,5,6,7,5,0,0,0,0,8,5,5,8,8,8,8,8,8,6,7,0,5,0,5,0,9,10,6,8,7,5,9,10,6,8,7,5,6,7,10,10,10,9,10,10,6,8,7,5,9,10,10,6,8,7,5,9,10,6,8,7,5,6,8,7,10,6,8,8,7,5,9,10,6,8,7,5,6,7,9,10,6,8,7,5,9,10,6,8,7,5,11,6,8,7,6,7,6,7,8,9,10,6,6,8,7,7,5,9,10,6,8,7,5,11,10,9,10,6,8,7,5,9,9,10,6,8,7,5,12,13,14,15,14,15,16,17,18,19,20,21,22],"f":[null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[],["extensionid",4]],[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["branchid",4]],[["option",4,["box"]],["box",3,["epoch"]]]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],null,[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[]],[[]],[[]],[[],["bool",15]],[[["blockheight",3],["transaction",3]]],[[]],[[],["result",4]],[[],["result",4]],[[["u32",15]],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],null,[[]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[["witness",3],["context",3],["precondition",3]],[["error",4],["result",4,["error"]]]],[[]],[[]],[[]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],[["result",4,["demobuilderror"]],["demobuilderror",4]]],[[["amount",3]],[["result",4,["demobuilderror"]],["demobuilderror",4]]],[[["amount",3]],[["result",4,["demobuilderror"]],["demobuilderror",4]]],[[["usize",15]]],[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["precondition",4]],["bool",15]],[[["error",4]],["bool",15]],[[["witness",4]],["bool",15]],null,[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[["u32",15]],["result",4]],[[["u32",15]],["result",4]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["bool",15]],[[["precondition",4]],["bool",15]],[[["error",4]],["bool",15]],[[["witness",4]],["bool",15]],[[]],[[]],[[]],[[]],[[],["string",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[]],null,[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[["witness",4],["precondition",4]],[["result",4,["error"]],["error",4]]],[[]],[[]],[[]],[[]],[[]],[[]],null,null,null,null,null,null,null,null,null,null,null,null,null],"p":[[4,"ExtensionId"],[8,"Epoch"],[3,"InvalidExtId"],[3,"Context"],[4,"DemoBuildError"],[4,"Precondition"],[4,"Witness"],[4,"Error"],[3,"Program"],[3,"DemoBuilder"],[8,"Context"],[13,"BaseBuilderError"],[13,"PrevoutParseFailure"],[13,"TransferMismatch"],[13,"CloseMismatch"],[13,"IllegalPayloadLength"],[13,"ModeInvalid"],[13,"InvalidOutputQty"],[13,"Open"],[13,"Close"],[13,"Open"],[13,"Close"]]},\
"zcash_history":{"doc":"Chain history library for Zcash","t":[3,4,4,4,13,13,13,13,17,17,13,3,16,13,3,4,4,8,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,10,11,11,12,11,10,11,11,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,12,10,11,11,12,12,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,12,12,12,12,12,12],"n":["Entry","EntryKind","EntryLink","Error","ExpectedInMemory","ExpectedNode","Generated","Leaf","MAX_ENTRY_SIZE","MAX_NODE_DATA_SIZE","Node","NodeData","NodeData","Stored","Tree","V1","V2","Version","append_leaf","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","combine","combine","combine","combine_inner","combine_inner","combine_inner","complete","consensus_branch_id","consensus_branch_id","consensus_branch_id","consensus_branch_id","default","end_height","end_height","end_height","end_height","end_sapling_root","end_target","end_time","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from_bytes","from_bytes","from_bytes","from_bytes","hash","hash","hash","into","into","into","into","into","into","into","into","is_empty","leaf","leaf_count","left","len","link_node_expected","new","new","new_leaf","node_expected","read","read","read","read","read","resolve_link","right","root","root_node","sapling_tx","start_height","start_height","start_height","start_height","start_sapling_root","start_target","start_time","subtree_commitment","subtree_total_work","to_bytes","to_bytes","to_bytes","to_owned","to_owned","to_string","to_string","to_string","truncate_leaf","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","write","write","write","write","write","0","1","0","0","0","0"],"q":["zcash_history","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","zcash_history::EntryKind","","zcash_history::EntryLink","","zcash_history::Error",""],"d":["MMR Entry.","MMR Node. It is leaf when <code>left</code>, <code>right</code> are <code>None</code> and node …","Reference to to the tree node.","Crate-level error type","Entry expected to be presented in the tree view while it …","Entry expected to be a node (specifying for which link …","Reference to the generated leaf/node.","Leaf entry.","Max serialized length of entry data.","Maximum serialized size of the node metadata.","Node entry with children links.","V1 node metadata.","The node data for this tree version.","Reference to the stored (in the array representation) …","Represents partially loaded tree.","Version 1 of the Zcash chain history tree.","Version 2 of the Zcash chain history tree.","A version of the chain history tree.","Append one leaf to the tree.","","","","","","","","","","","","","","","","","","","","","Combines two nodes’ metadata.","Combines two nodes’ metadata.","Combine two nodes metadata.","Combines two nodes metadata.","","","Returns if is this node complete (has total of 2^N leaves)","Returns the consensus branch ID for the given node data.","","","Consensus branch id, should be provided by deserializing …","","Returns the end height for the given node data.","","","End height","End sapling tree root.","End target.","End time.","","","","","","","","","","","","","","","","","Convert from byte representation.","Convert from byte representation.","Convert from byte representation.","Convert from byte representation.","Hash node metadata","Hash node metadata","Hash node metadata","","","","","","","","","If this tree is empty.","Is this node a leaf.","Number of leaves under this node.","Left child","Length of array representation of the tree.","Entry expected to be a node (specifying for which link …","New view into the the tree array representation","New entry of type node.","Creates a new leaf.","Some entry is expected to be node","Parses node data from the given reader.","","","Read from byte representation.","Read from the byte representation.","Resolve link originated from this tree","Right child.","Link to the root node","Reference to the root node.","Number of Sapling transactions.","Returns the start height for the given node data.","","","Start height.","Start sapling tree root.","Start target.","Start time.","Subtree commitment - either block hash for leaves or …","Part of tree total work.","Converts to byte representation.","Converts to byte representation.","Convert to byte representation.","","","","","","Truncate one leaf from the end of the tree.","","","","","","","","","","","","","","","","","","","","","","","","","Writes the byte representation of the given node data to …","","","Write to byte representation.","Write to the byte representation.","","","","","",""],"i":[0,0,0,0,1,1,2,3,0,0,3,0,4,2,0,0,0,0,5,5,6,7,8,9,1,2,3,5,6,7,8,9,1,2,3,9,2,9,2,4,4,9,4,6,7,8,4,6,7,9,9,4,6,7,9,9,9,9,8,8,9,1,1,2,2,3,5,6,7,8,9,1,2,3,4,4,8,9,4,4,9,5,6,7,8,9,1,2,3,5,8,8,8,5,1,5,8,8,1,4,6,7,8,9,5,8,5,5,9,4,6,7,9,9,9,9,9,9,4,4,9,9,2,8,1,2,5,5,6,7,8,9,1,2,3,5,6,7,8,9,1,2,3,5,6,7,8,9,1,2,3,4,6,7,8,9,10,10,11,12,13,14],"f":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[],[["error",4],["vec",3,["entrylink"]],["result",4,["vec","error"]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["nodedata",3]],[[],["entrylink",4]],[[]],[[]],[[]],[[]],[[["nodedata",3]],["nodedata",3]],[[]],[[]],[[]],[[],["bool",15]],[[],["u32",15]],[[],["u32",15]],[[],["u32",15]],null,[[],["nodedata",3]],[[],["u64",15]],[[],["u64",15]],[[],["u64",15]],null,null,null,null,[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["u32",15],["asref",8]],["result",6]],[[["u32",15],["asref",8]],["result",6]],[[["u32",15],["asref",8]],["result",6]],[[["u32",15],["asref",8]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["bool",15]],[[],["bool",15]],[[],["u64",15]],[[],[["entrylink",4],["result",4,["entrylink","error"]],["error",4]]],[[],["u32",15]],[[["entrylink",4]]],[[["u32",15],["vec",3]]],[[["entrylink",4]]],[[]],[[]],[[["u32",15]],["result",6]],[[["u32",15]],["result",6]],[[["u32",15]],["result",6]],[[["u32",15]],["result",6]],[[["u32",15]],["result",6]],[[["entrylink",4]],[["indexednode",3],["error",4],["result",4,["indexednode","error"]]]],[[],[["entrylink",4],["result",4,["entrylink","error"]],["error",4]]],[[],["entrylink",4]],[[],[["indexednode",3],["error",4],["result",4,["indexednode","error"]]]],null,[[],["u64",15]],[[],["u64",15]],[[],["u64",15]],null,null,null,null,null,null,[[],[["u8",15],["vec",3,["u8"]]]],[[],[["u8",15],["vec",3,["u8"]]]],[[],[["u8",15],["vec",3,["u8"]]]],[[]],[[]],[[],["string",3]],[[],["string",3]],[[],["string",3]],[[],[["result",4,["u32","error"]],["u32",15],["error",4]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["result",6]],[[],["result",6]],[[],["result",6]],[[],["result",6]],[[],["result",6]],null,null,null,null,null,null],"p":[[4,"Error"],[4,"EntryLink"],[4,"EntryKind"],[8,"Version"],[3,"Tree"],[4,"V1"],[4,"V2"],[3,"Entry"],[3,"NodeData"],[13,"Node"],[13,"Stored"],[13,"Generated"],[13,"ExpectedInMemory"],[13,"ExpectedNode"]]},\
"zcash_note_encryption":{"doc":"Implementation of in-band secret distribution abstractions …","t":[12,12,12,12,17,17,16,8,17,3,16,16,16,16,16,13,16,17,16,3,3,4,17,17,3,3,16,16,16,8,16,13,16,11,11,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,10,10,11,10,10,10,11,11,10,10,11,10,11,11,10,10,10,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,10,10,10,10,11,11,10,10,10,10,11,11,5,11,11,11,11,11,11,11,11,11,11,11,11,5,5,5,11,11,11,11,11,11,5,5],"n":["0","0","0","0","AEAD_TAG_SIZE","COMPACT_NOTE_SIZE","DiversifiedTransmissionKey","Domain","ENC_CIPHERTEXT_SIZE","EphemeralKeyBytes","EphemeralPublicKey","EphemeralSecretKey","ExtractedCommitment","ExtractedCommitmentBytes","IncomingViewingKey","Invalid","Memo","NOTE_PLAINTEXT_SIZE","Note","NoteEncryption","NotePlaintextBytes","NoteValidity","OUT_CIPHERTEXT_SIZE","OUT_PLAINTEXT_SIZE","OutPlaintextBytes","OutgoingCipherKey","OutgoingViewingKey","Recipient","SharedSecret","ShieldedOutput","SymmetricKey","Valid","ValueCommitment","as_ref","as_ref","batch","batch_epk","batch_kdf","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","check_epk_bytes","clone","clone","clone_into","clone_into","cmstar","cmstar_bytes","ct_eq","derive_esk","derive_ock","enc_ciphertext","encrypt_note_plaintext","encrypt_outgoing_plaintext","ephemeral_key","epk","epk","epk_bytes","eq","esk","extract_esk","extract_memo","extract_pk_d","fmt","from","from","from","from","from","from","from","from","get_pk_d","into","into","into","into","into","into","ka_agree_dec","ka_agree_enc","ka_derive_public","kdf","new","new_with_esk","note_plaintext_bytes","outgoing_plaintext_bytes","parse_note_plaintext_without_memo_ivk","parse_note_plaintext_without_memo_ovk","to_owned","to_owned","try_compact_note_decryption","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_note_decryption","try_output_recovery_with_ock","try_output_recovery_with_ovk","type_id","type_id","type_id","type_id","type_id","type_id","try_compact_note_decryption","try_note_decryption"],"q":["zcash_note_encryption","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","zcash_note_encryption::batch",""],"d":["","","","","","","","","","","","","","","","","","","","A struct containing context required for encrypting …","","","","","","A symmetric key that can be used to recover a single …","","","","","","","","","","APIs for batch trial decryption.","Computes <code>Self::epk</code> on a batch of ephemeral keys.","Computes <code>Self::kdf</code> on a batch of items.","","","","","","","","","","","","","","","","","","","","","","","","Generates <code>encCiphertext</code> for this note.","Generates <code>outCiphertext</code> for this note.","","","Exposes the encoding of the ephemeral public key being …","","","Exposes the ephemeral secret key being used to encrypt …","","","","","","","","","","","","","","","","","","","","","","","","Construct a new note encryption context for the specified …","For use only with Sapling. This method is preserved in …","","","","","","","Trial decryption of the compact note plaintext by the …","","","","","","","","","","","","","Trial decryption of the full note plaintext by the …","Recovery of the full note plaintext by the sender.","Recovery of the full note plaintext by the sender.","","","","","","","Trial decryption of a batch of notes for light clients …","Trial decryption of a batch of notes with a set of …"],"i":[1,2,3,4,0,0,5,0,0,0,5,5,5,5,5,6,5,0,5,0,0,0,0,0,0,0,5,5,5,0,5,6,5,1,4,0,5,5,1,2,3,7,4,6,1,2,3,7,4,6,5,4,6,4,6,5,8,4,5,5,8,7,7,8,5,7,5,6,7,5,5,5,4,1,1,2,3,7,4,4,6,5,1,2,3,7,4,6,5,5,5,5,7,7,5,5,5,5,4,6,0,1,2,3,7,4,6,1,2,3,7,4,6,0,0,0,1,2,3,7,4,6,0,0],"f":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],null,[[],["vec",3]],[[],[["option",4],["vec",3,["option"]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["fn",8]],["notevalidity",4]],[[],["ephemeralkeybytes",3]],[[],["notevalidity",4]],[[]],[[]],[[]],[[]],[[],["choice",3]],[[],["option",4]],[[["ephemeralkeybytes",3]],["outgoingcipherkey",3]],[[]],[[]],[[]],[[],["ephemeralkeybytes",3]],[[["ephemeralkeybytes",3]],["option",4]],[[]],[[],["ephemeralkeybytes",3]],[[["notevalidity",4]],["bool",15]],[[]],[[],["option",4]],[[]],[[],["option",4]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[],["ephemeralkeybytes",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["ephemeralkeybytes",3]]],[[["option",4]]],[[["option",4]]],[[],["noteplaintextbytes",3]],[[],["outplaintextbytes",3]],[[],["option",4]],[[["ephemeralkeybytes",3]],["option",4]],[[]],[[]],[[],["option",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["option",4]],[[["outgoingcipherkey",3]],["option",4]],[[],["option",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],[["vec",3,["option"]],["option",4]]],[[],[["vec",3,["option"]],["option",4]]]],"p":[[3,"OutgoingCipherKey"],[3,"NotePlaintextBytes"],[3,"OutPlaintextBytes"],[3,"EphemeralKeyBytes"],[8,"Domain"],[4,"NoteValidity"],[3,"NoteEncryption"],[8,"ShieldedOutput"]]},\
"zcash_primitives":{"doc":"<em>General Zcash primitives.</em>","t":[0,0,0,0,0,0,0,0,0,0,0,12,3,3,3,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,12,12,11,12,12,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,3,13,13,4,13,13,17,13,13,17,3,13,4,4,13,13,13,13,8,13,13,13,17,3,13,13,13,17,10,11,11,11,11,11,10,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,10,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,5,17,17,17,17,17,17,17,3,17,17,17,17,17,17,17,17,17,17,17,11,11,11,11,11,11,11,11,11,0,0,0,11,11,11,11,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,0,12,3,16,16,4,16,16,8,8,8,13,3,16,13,8,3,16,10,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,12,12,11,11,11,11,12,12,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,12,12,12,13,3,13,4,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,11,11,11,11,11,11,11,11,11,11,11,12,12,5,13,13,4,13,13,4,3,13,3,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,3,8,8,3,3,11,11,12,10,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,0,11,11,11,11,11,11,11,11,11,12,10,10,11,11,11,11,11,11,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,10,11,11,17,17,17,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,12,12,12,13,13,3,3,3,3,3,3,3,4,17,17,3,3,3,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,5,11,11,11,11,11,11,12,0,12,0,11,12,0,12,11,11,11,0,11,12,5,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,5,12,3,3,3,17,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,5,5,11,11,11,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,5,5,17,17,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,5,5,5,11,11,5,5,5,5,11,11,13,13,4,11,11,11,11,11,11,11,11,11,11,11,5,11,11,11,11,11,12,16,8,10,0,10,10,10,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,3,3,3,3,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,5,5,5,5,5,5,8,3,16,4,16,13,16,16,13,13,16,16,13,3,3,8,16,16,3,3,3,4,16,16,3,3,13,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,11,11,11,11,11,11,11,11,11,11,11,10,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,10,10,10,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,11,12,12,12,11,11,11,11,12,11,12,0,0,0,11,11,0,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,11,11,11,11,11,11,11,11,11,11,11,11,12,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,3,13,4,13,13,3,13,13,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,17,0,0,0,0,0,0,3,17,17,17,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,11,11,11,11,11,11,11,11,11,5,5,5,17,17,17,3,11,11,11,11,11,11,11,11,11,5,5,5,5,5,5,5,5,5,5,0,11,11,11,11,5,5,5,5,5,5,5,5,5,16,8,3,3,3,6,3,3,16,3,3,3,12,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,11,11,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,11,11,11,11,5,11,5,11,11,5,12,12,12,12,12,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,12,12,13,13,4,13,13,3,3,3,13,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,5,5,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,11,11,11,11,11,11,11,11,11,11,11,8,3,3,3,16,3,3,11,12,11,11,11,11,11,11,11,11,11,11,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,12,12,12,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,11,11,11,11,11,11,11,11,4,13,13,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,17,5,5,5,5,5,8,3,3,3,3,3,16,12,11,11,11,11,11,11,11,11,11,11,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,11,11,11,11,11,12,11,11,11,11,4,13,3,3,3,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,5,5,5,5,5,5,17,17,17,17,17,13,4,3,13,3,13,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,5,5,5,5,5,5,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,11,11,11,11,11,11,11,0,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,4,3,3,3,3,13,13,17,17,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,5,13,13,4,13,13,4,13,13,13,13,13,4,3,13,13,13,13,13,13,13,13,13,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12],"n":["block","consensus","constants","extensions","legacy","memo","merkle_tree","sapling","transaction","zip32","zip339","0","BlockHash","BlockHeader","BlockHeaderData","bits","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone_into","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","drop","drop","drop","eq","final_sapling_root","fmt","fmt","freeze","from","from","from","from_slice","hash","hash","init","init","init","into","into","into","merkle_root","ne","nonce","prev_block","read","solution","time","to_owned","to_string","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","version","vzip","vzip","vzip","write","BlockHeight","Blossom","Blossom","BranchId","Canopy","Canopy","H0","Heartwood","Heartwood","MAIN_NETWORK","MainNetwork","MainNetwork","Network","NetworkUpgrade","Nu5","Nu5","Overwinter","Overwinter","Parameters","Sapling","Sapling","Sprout","TEST_NETWORK","TestNetwork","TestNetwork","ZFuture","ZFuture","ZIP212_GRACE_PERIOD","activation_height","activation_height","activation_height","activation_height","add","add","b58_pubkey_address_prefix","b58_pubkey_address_prefix","b58_pubkey_address_prefix","b58_pubkey_address_prefix","b58_script_address_prefix","b58_script_address_prefix","b58_script_address_prefix","b58_script_address_prefix","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","coin_type","coin_type","coin_type","coin_type","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","drop","drop","drop","drop","drop","drop","eq","eq","eq","eq","eq","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","for_height","from","from","from","from","from","from","from","from_u32","hash","height_bounds","height_range","hrp_sapling_extended_full_viewing_key","hrp_sapling_extended_full_viewing_key","hrp_sapling_extended_full_viewing_key","hrp_sapling_extended_full_viewing_key","hrp_sapling_extended_spending_key","hrp_sapling_extended_spending_key","hrp_sapling_extended_spending_key","hrp_sapling_extended_spending_key","hrp_sapling_payment_address","hrp_sapling_payment_address","hrp_sapling_payment_address","hrp_sapling_payment_address","init","init","init","init","init","init","into","into","into","into","into","into","is_nu_active","ne","partial_cmp","sprout_uses_groth_proofs","sub","sub","testing","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","vzip","vzip","vzip","vzip","vzip","vzip","arb_branch_id","arb_height","CRH_IVK_PERSONALIZATION","GH_FIRST_BLOCK","KEY_DIVERSIFICATION_PERSONALIZATION","NOTE_COMMITMENT_RANDOMNESS_GENERATOR","NULLIFIER_POSITION_GENERATOR","NULLIFIER_POSITION_IN_TREE_GENERATOR_PERSONALIZATION","PEDERSEN_HASH_CHUNKS_PER_GENERATOR","PEDERSEN_HASH_EXP_TABLE","PEDERSEN_HASH_EXP_WINDOW_SIZE","PEDERSEN_HASH_GENERATORS","PEDERSEN_HASH_GENERATORS_PERSONALIZATION","PRF_NF_PERSONALIZATION","PROOF_GENERATION_KEY_BASE_GENERATOR_PERSONALIZATION","PROOF_GENERATION_KEY_GENERATOR","SPENDING_KEY_GENERATOR","SPENDING_KEY_GENERATOR_PERSONALIZATION","VALUE_COMMITMENT_GENERATOR_PERSONALIZATION","VALUE_COMMITMENT_RANDOMNESS_GENERATOR","VALUE_COMMITMENT_VALUE_GENERATOR","borrow","borrow_mut","deref","deref","deref_mut","drop","from","init","into","mainnet","regtest","testnet","try_from","try_into","type_id","vzip","B58_PUBKEY_ADDRESS_PREFIX","B58_SCRIPT_ADDRESS_PREFIX","COIN_TYPE","HRP_SAPLING_EXTENDED_FULL_VIEWING_KEY","HRP_SAPLING_EXTENDED_SPENDING_KEY","HRP_SAPLING_PAYMENT_ADDRESS","B58_PUBKEY_ADDRESS_PREFIX","B58_SCRIPT_ADDRESS_PREFIX","COIN_TYPE","HRP_SAPLING_EXTENDED_FULL_VIEWING_KEY","HRP_SAPLING_EXTENDED_SPENDING_KEY","HRP_SAPLING_PAYMENT_ADDRESS","B58_PUBKEY_ADDRESS_PREFIX","B58_SCRIPT_ADDRESS_PREFIX","COIN_TYPE","HRP_SAPLING_EXTENDED_FULL_VIEWING_KEY","HRP_SAPLING_EXTENDED_SPENDING_KEY","HRP_SAPLING_PAYMENT_ADDRESS","transparent","0","AuthData","BuildCtx","BuildError","Error","Error","Error","Extension","ExtensionTxBuilder","FromPayload","InvalidExtensionId","Precondition","Precondition","ProgramError","ToPayload","Witness","Witness","add_tze_input","add_tze_output","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone_into","clone_into","clone_into","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","drop","drop","drop","drop","eq","eq","eq","eq","extension_id","extension_id","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from_payload","init","init","init","init","into","into","into","into","mode","mode","ne","ne","ne","ne","payload","payload","to_owned","to_owned","to_owned","to_payload","to_string","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_to","try_to","type_id","type_id","type_id","type_id","verify","verify_inner","vzip","vzip","vzip","vzip","0","0","0","PublicKey","Script","Script","TransparentAddress","address","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","default","deref","deref","deref_mut","deref_mut","drop","drop","eq","eq","fmt","fmt","from","from","hash","init","init","into","into","ne","ne","partial_cmp","read","script","shl","testing","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","write","0","0","arb_transparent_addr","Arbitrary","Empty","Error","Future","InvalidUtf8","Memo","MemoBytes","Text","TextMemo","TooLong","as_array","as_slice","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone_into","clone_into","clone_into","cmp","default","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","drop","drop","drop","drop","empty","encode","eq","eq","eq","eq","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from_bytes","from_bytes","from_str","init","init","init","init","into","into","into","into","ne","ne","partial_cmp","to_owned","to_owned","to_owned","to_string","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","vzip","vzip","vzip","vzip","0","0","0","0","0","CommitmentTree","HashSer","Hashable","IncrementalWitness","MerklePath","append","append","auth_path","blank","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone_into","clone_into","clone_into","combine","deref","deref","deref","deref_mut","deref_mut","deref_mut","drop","drop","drop","empty","empty_root","eq","fmt","fmt","from","from","from","from_path","from_slice","from_tree","incremental","init","init","init","into","into","into","ne","path","position","position","read","read","read","read","root","root","root","size","testing","to_frontier","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","vzip","vzip","vzip","write","write","write","write","BRIDGE_CHECKPOINT","EMPTY_CHECKPOINT","SER_V1","read_auth_fragment_v1","read_bridge_v1","read_checkpoint_v1","read_frontier_v0","read_frontier_v1","read_nonempty_frontier_v1","read_position","read_tree","read_tree_v1","write_auth_fragment_v1","write_bridge_v1","write_checkpoint_v1","write_frontier_v1","write_nonempty_frontier_v1","write_tree","write_tree_v1","arb_commitment_tree","0","0","0","AfterZip212","BeforeZip212","Diversifier","Node","Note","NoteValue","Nullifier","PaymentAddress","ProofGenerationKey","Rseed","SAPLING_COMMITMENT_TREE_DEPTH","SAPLING_COMMITMENT_TREE_DEPTH_U8","SaplingIvk","ValueCommitment","ViewingKey","ak","ak","as_bits","as_ref","blank","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cmu","combine","combine","commitment","create_note","ct_eq","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","derive_esk","diversifier","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","empty_leaf","empty_root","empty_root","encode_hex","encode_hex_upper","eq","eq","eq","eq","eq","eq","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from_bytes","from_parts","from_slice","g_d","g_d","g_d","generate_or_derive_esk","group_hash","init","init","init","init","init","init","init","init","init","init","init","into","into","into","into","into","into","into","into","into","into","into","ivk","keys","merkle_hash","ne","ne","ne","ne","new","nf","nk","note_encryption","nsk","pedersen_hash","pk_d","pk_d","prover","randomness","rcm","read","read","redjubjub","rk","rseed","spend_sig","testing","to_bytes","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_payment_address","to_payment_address","to_repr","to_vec","to_viewing_key","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","uncommitted","util","value","value","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","write","write","0","0","group_hash","0","ExpandedSpendingKey","FullViewingKey","OutgoingViewingKey","PRF_EXPAND_PERSONALIZATION","ask","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone_into","clone_into","clone_into","deref","deref","deref","deref_mut","deref_mut","deref_mut","drop","drop","drop","eq","fmt","fmt","from","from","from","from_expanded_spending_key","from_spending_key","init","init","init","into","into","into","ne","nsk","ovk","ovk","prf_expand","prf_expand_vec","proof_generation_key","read","read","testing","to_bytes","to_bytes","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","vk","vzip","vzip","vzip","write","write","arb_extended_spending_key","arb_shielded_addr","KDF_SAPLING_PERSONALIZATION","PRF_OCK_PERSONALIZATION","SaplingDomain","batch_epk","batch_kdf","borrow","borrow_mut","check_epk_bytes","cmstar","deref","deref_mut","derive_esk","derive_ock","drop","epk","epk_bytes","extract_esk","extract_memo","extract_pk_d","for_height","from","get_pk_d","init","into","ka_agree_dec","ka_agree_enc","ka_derive_public","kdf","note_plaintext_bytes","outgoing_plaintext_bytes","parse_note_plaintext_without_memo_ivk","parse_note_plaintext_without_memo_ovk","plaintext_version_is_valid","prf_ock","sapling_ka_agree","sapling_note_encryption","try_from","try_into","try_sapling_compact_note_decryption","try_sapling_note_decryption","try_sapling_output_recovery","try_sapling_output_recovery_with_ock","type_id","vzip","MerkleTree","NoteCommitment","Personalization","borrow","borrow_mut","clone","clone_into","deref","deref_mut","drop","from","get_bits","init","into","pedersen_hash","to_owned","try_from","try_into","type_id","vzip","0","SaplingProvingContext","TxProver","binding_sig","mock","new_sapling_proving_context","output_proof","spend_proof","MockTxProver","binding_sig","borrow","borrow_mut","deref","deref_mut","drop","from","init","into","new_sapling_proving_context","output_proof","spend_proof","try_from","try_into","type_id","vzip","0","0","BatchEntry","PrivateKey","PublicKey","Signature","batch_verify","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","drop","drop","drop","drop","fmt","fmt","from","from","from","from","from_private","init","init","init","init","into","into","into","into","randomize","randomize","read","read","read","sign","to_owned","to_owned","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","verify","verify_with_zip216","vzip","vzip","vzip","vzip","write","write","write","arb_node","arb_note","arb_note_value","arb_payment_address","arb_positive_note_value","generate_random_rseed","hash_to_scalar","Authorization","Authorized","Digest","DigestError","HeaderDigest","NotSigned","OrchardAuth","OrchardDigest","Overwinter","Sapling","SaplingAuth","SaplingDigest","Sprout","Transaction","TransactionData","TransactionDigest","TransparentAuth","TransparentDigest","TransparentDigests","TxDigests","TxId","TxVersion","TzeAuth","TzeDigest","TzeDigests","Unauthorized","ZFuture","Zip225","as_ref","auth_commitment","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","builder","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","combine","components","consensus_branch_id","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","digest","digest_header","digest_orchard","digest_sapling","digest_transparent","digest_tze","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","eq","eq","eq","expiry_height","fmt","fmt","fmt","fmt","fmt","freeze","from","from","from","from","from","from","from","from","from","from","from_bytes","from_parts","has_orchard","has_overwinter","has_sapling","has_sprout","has_tze","hash","header","header_digest","init","init","init","init","init","init","init","init","init","init","inputs_digest","into","into","into","into","into","into","into","into","into","into","ne","ne","orchard_bundle","orchard_digest","outputs_digest","outputs_digest","partial_cmp","per_input_digest","per_input_digest","prevout_digest","read","read","read","sapling_bundle","sapling_digest","sapling_value_balance","sequence_digest","sighash","sighash_v4","sighash_v5","sprout_bundle","suggested_for_branch","testing","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","transparent_bundle","transparent_digests","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","txid","txid","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","tze_bundle","tze_digests","util","version","version_group_id","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","write","write","write","write_transparent","write_tze","write_v4","write_v5","write_v5_header","write_v5_sapling","0","Builder","ChangeIsNegative","Error","InvalidAmount","NoChangeAddress","Progress","SaplingBuild","TransparentBuild","TzeBuild","add_sapling_output","add_sapling_spend","add_transparent_input","add_transparent_output","add_tze_input","add_tze_output","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","build","cur","deref","deref","deref","deref_mut","deref_mut","deref_mut","drop","drop","drop","end","eq","fmt","fmt","from","from","from","init","init","init","into","into","into","mock_build","ne","new","new","new_with_rng","send_change_to","test_only_new_with_rng","to_string","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","vzip","vzip","vzip","with_progress_notifier","0","0","0","0","GROTH_PROOF_SIZE","amount","orchard","sapling","sprout","transparent","tze","Amount","COIN","DEFAULT_FEE","MAX_MONEY","add","add_assign","borrow","borrow_mut","clone","clone_into","cmp","deref","deref_mut","drop","dynamic_usage","dynamic_usage_bounds","eq","fmt","from","from_i64","from_i64_le_bytes","from_nonnegative_i64","from_nonnegative_i64_le_bytes","from_u64","from_u64_le_bytes","init","into","is_negative","is_positive","ne","neg","partial_cmp","sub","sub_assign","testing","to_i64_le_bytes","to_owned","try_from","try_from","try_from","try_into","type_id","vzip","zero","arb_amount","arb_nonnegative_amount","arb_positive_amount","FLAGS_EXPECTED_UNSET","FLAG_OUTPUTS_ENABLED","FLAG_SPENDS_ENABLED","Unauthorized","borrow","borrow_mut","deref","deref_mut","drop","fmt","from","init","into","read_action_without_auth","read_anchor","read_cmx","read_flags","read_note_ciphertext","read_nullifier","read_signature","read_v5_bundle","read_value_commitment","read_verification_key","testing","try_from","try_into","type_id","vzip","write_action_without_auth","write_cmx","write_note_ciphertext","write_nullifier","write_v5_bundle","write_value_commitment","write_verification_key","arb_bundle","arb_bundle_for_version","AuthSig","Authorization","Authorized","Bundle","CompactOutputDescription","GrothProofBytes","OutputDescription","OutputDescriptionV5","Proof","SpendDescription","SpendDescriptionV5","Unproven","anchor","apply_signature","apply_signatures","authorization","binding_sig","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","builder","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cmstar_bytes","cmstar_bytes","cmu","cmu","cmu","cv","cv","cv","cv","deref","deref","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","drop","drop","drop","drop","drop","drop","drop","drop","enc_ciphertext","enc_ciphertext","enc_ciphertext","enc_ciphertext","enc_ciphertext","ephemeral_key","ephemeral_key","ephemeral_key","ephemeral_key","ephemeral_key","eq","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","init","init","init","init","init","init","init","init","into","into","into","into","into","into","into","into","into_output_description","into_spend_description","nullifier","nullifier","out_ciphertext","out_ciphertext","read","read","read","read","read_base","read_nullifier","read_point","read_rk","read_spend_auth_sig","read_zkproof","rk","rk","shielded_outputs","shielded_spends","spend_auth_sig","testing","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","value_balance","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","write_v4","write_v4","write_v5_without_proof","write_v5_without_witness_data","zkproof","zkproof","AnchorMismatch","BindingSig","Error","InvalidAddress","InvalidAmount","SaplingBuilder","SaplingMetadata","SpendDescriptionInfo","SpendProof","Unauthorized","add_output","add_spend","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","build","clone","clone","clone","clone_into","clone_into","clone_into","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","drop","drop","drop","drop","drop","empty","eq","eq","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","get_candidate_change_address","init","init","init","init","init","into","into","into","into","into","ne","new","output_index","spend_index","testing","to_owned","to_owned","to_owned","to_string","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","value_balance","vzip","vzip","vzip","vzip","vzip","arb_bundle","arb_bundle_for_version","arb_output_description","Bundle","JsDescription","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","deref","deref","deref_mut","deref_mut","drop","drop","fmt","fmt","from","from","init","init","into","into","joinsplit_pubkey","joinsplit_sig","joinsplits","read","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","write","Authorization","Authorized","Bundle","OutPoint","ScriptSig","TxIn","TxOut","apply_signatures","authorization","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","builder","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","drop","drop","drop","drop","drop","eq","eq","eq","eq","eq","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","hash","init","init","init","init","init","into","into","into","into","into","n","ne","ne","ne","ne","new","new","prevout","read","read","read","script_pubkey","script_sig","sequence","testing","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","value","vin","vout","vzip","vzip","vzip","vzip","vzip","write","write","write","Error","InvalidAddress","InvalidAmount","TransparentBuilder","Unauthorized","add_input","add_output","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","build","clone","clone_into","deref","deref","deref","deref_mut","deref_mut","deref_mut","drop","drop","drop","empty","eq","fmt","fmt","fmt","from","from","from","init","init","init","into","into","into","to_owned","to_string","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","value_balance","vzip","vzip","vzip","VALID_OPCODES","arb_bundle","arb_outpoint","arb_script","arb_txin","arb_txout","Authorization","Authorized","Bundle","OutPoint","TzeIn","TzeOut","Witness","authorization","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","builder","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","drop","drop","drop","drop","drop","eq","eq","eq","eq","eq","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","init","init","init","init","init","into","into","into","into","into","into_authorized","n","ne","ne","ne","ne","new","new","precondition","prevout","read","read","read","testing","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","txid","type_id","type_id","type_id","type_id","type_id","value","vin","vout","vzip","vzip","vzip","vzip","vzip","witness","write","write","write","write_without_witness","Error","InvalidAmount","TzeBuilder","TzeSigner","Unauthorized","WitnessModeMismatch","add_input","add_output","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","build","clone","clone_into","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","drop","drop","drop","drop","empty","eq","eq","fmt","fmt","fmt","from","from","from","from","init","init","init","init","into","into","into","into","ne","to_owned","to_string","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","value_balance","vzip","vzip","vzip","vzip","0","1","arb_bundle","arb_outpoint","arb_precondition","arb_tzein","arb_tzeout","arb_witness","SIGHASH_ALL","SIGHASH_ANYONECANPAY","SIGHASH_MASK","SIGHASH_NONE","SIGHASH_SINGLE","Shielded","SignableInput","SignatureHash","Transparent","TransparentInput","Tze","TzeInput","as_ref","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","drop","drop","drop","drop","from","from","from","from","index","index","init","init","init","init","into","into","into","into","new","new","precondition","script_code","signature_hash","transparent","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","tze","value","value","vzip","vzip","vzip","vzip","0","0","v4_signature_hash","v5_signature_hash","arb_tx","arb_tx_version","arb_txdata","arb_txid","BlockTxCommitmentDigester","TxIdDigester","borrow","borrow","borrow_mut","borrow_mut","combine","combine","deref","deref","deref_mut","deref_mut","digest_header","digest_header","digest_orchard","digest_orchard","digest_sapling","digest_sapling","digest_transparent","digest_transparent","digest_tze","digest_tze","drop","drop","from","from","init","init","into","into","to_txid","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","sha256d","HashReader","HashWriter","borrow","borrow","borrow_mut","borrow_mut","default","deref","deref","deref_mut","deref_mut","drop","drop","flush","from","from","init","init","into","into","into_base_reader","into_hash","into_hash","new","read","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","write","0","0","ChildIndex","DiversifierIndex","DiversifierKey","ExtendedFullViewingKey","ExtendedSpendingKey","Hardened","NonHardened","ZIP32_SAPLING_FVFP_PERSONALIZATION","ZIP32_SAPLING_MASTER_PERSONALIZATION","address","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","default","default_address","default_address","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","derive_child","derive_child","diversifier","drop","drop","drop","drop","drop","eq","eq","eq","eq","eq","expsk","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from_index","from_path","fvk","increment","init","init","init","init","init","into","into","into","into","into","master","master","ne","ne","ne","new","read","read","testing","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","vzip","vzip","vzip","vzip","vzip","write","write","0","0","arb_extended_spending_key","BadEntropyBitCount","BadWordCount","Count","Czech","English","Error","French","InvalidChecksum","Italian","Japanese","Korean","Language","Mnemonic","Portuguese","SimplifiedChinese","Spanish","TraditionalChinese","UnknownWord","Words12","Words15","Words18","Words21","Words24","all","as_ref","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","checksum_bits","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","cmp","cmp","cmp","default","default","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","drop","drop","drop","drop","drop","entropy","entropy_bits","eq","eq","eq","eq","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from_entropy","from_entropy_in","from_phrase","from_phrase_in","from_str","generate","generate_in","hash","hash","hash","init","init","init","init","into","into","into","into","into_entropy","into_phrase","lang","ne","ne","partial_cmp","partial_cmp","partial_cmp","phrase","to_owned","to_owned","to_owned","to_owned","to_seed","to_string","to_string","to_string","to_string","total_bits","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","validate","validate_in","vzip","vzip","vzip","vzip","word_count","words_by_prefix","zeroize","0","0","0"],"q":["zcash_primitives","","","","","","","","","","","zcash_primitives::block","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","zcash_primitives::consensuszcash_primitives::consensus::testing","","zcash_primitives::constants","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","zcash_primitives::constants::mainnet","","","","","","zcash_primitives::constants::regtest","","","","","","zcash_primitives::constants::testnet","","","","","","zcash_primitives::extensions","zcash_primitives::extensions::transparent","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","zcash_primitives::extensions::transparent::Error","","zcash_primitives::legacy","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","zcash_primitives::legacy::TransparentAddress","","zcash_primitives::legacy::testing","zcash_primitives::memo","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","zcash_primitives::memo::Error","","zcash_primitives::memo::Memo","","","zcash_primitives::merkle_tree","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","zcash_primitives::merkle_tree::incremental","","","","","","","","","","","","","","","","","","","zcash_primitives::merkle_tree::testing","zcash_primitives::saplingzcash_primitives::sapling::Rseed","","zcash_primitives::sapling::group_hash","zcash_primitives::sapling::keys","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","zcash_primitives::sapling::keys::testing","","zcash_primitives::sapling::note_encryption","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","zcash_primitives::sapling::pedersen_hash","","","","","","","","","","","","","","","","","","","","zcash_primitives::sapling::pedersen_hash::Personalization","zcash_primitives::sapling::prover","","","","","","","zcash_primitives::sapling::prover::mock","","","","","","","","","","","","","","","","","zcash_primitives::sapling::redjubjub","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","zcash_primitives::sapling::testing","","","","","zcash_primitives::sapling::util","","zcash_primitives::transaction","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","zcash_primitives::transaction::TxVersion","zcash_primitives::transaction::builder","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","zcash_primitives::transaction::builder::Error","","","","zcash_primitives::transaction::components","","","","","","","zcash_primitives::transaction::components::amount","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","zcash_primitives::transaction::components::amount::testing","","","zcash_primitives::transaction::components::orchard","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","zcash_primitives::transaction::components::orchard::testing","","zcash_primitives::transaction::components::saplingzcash_primitives::transaction::components::sapling::builder","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","zcash_primitives::transaction::components::sapling::testing","","","zcash_primitives::transaction::components::sprout","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","zcash_primitives::transaction::components::transparent","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","zcash_primitives::transaction::components::transparent::builder","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","zcash_primitives::transaction::components::transparent::testing","","","","","","zcash_primitives::transaction::components::tze","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","zcash_primitives::transaction::components::tze::builder","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","zcash_primitives::transaction::components::tze::builder::Error","","zcash_primitives::transaction::components::tze::testing","","","","","","zcash_primitives::transaction::sighash","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","zcash_primitives::transaction::sighash::SignableInput","","zcash_primitives::transaction::sighash_v4","zcash_primitives::transaction::sighash_v5","zcash_primitives::transaction::testing","","","","zcash_primitives::transaction::txid","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","zcash_primitives::transaction::util","zcash_primitives::transaction::util::sha256d","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","zcash_primitives::zip32","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","zcash_primitives::zip32::ChildIndex","","zcash_primitives::zip32::testing","zcash_primitives::zip339","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","zcash_primitives::zip339::Error","",""],"d":["Structs and methods for handling Zcash block headers.","Consensus logic and parameters.","Various constants used by the Zcash primitives.","","Support for legacy transparent addresses and scripts.","Structs for handling encrypted memos.","Implementation of a Merkle tree of commitments used to …","Structs and constants specific to the Sapling shielded …","Structs and methods for handling Zcash transactions.","Implementation of ZIP 32 for hierarchical deterministic …","ZIP 339 for seed phrase support.","","","A Zcash block header.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Constructs a <code>BlockHash</code> from the given slice.","Returns the hash of this header.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","A wrapper type representing blockchain heights. Safe …","The Blossom network upgrade.","The consensus rules deployed by <code>NetworkUpgrade::Blossom</code>.","A globally-unique identifier for a set of consensus rules …","The Canopy network upgrade.","The consensus rules deployed by <code>NetworkUpgrade::Canopy</code>.","","The Heartwood network upgrade.","The consensus rules deployed by <code>NetworkUpgrade::Heartwood</code>.","","Marker struct for the production network.","","","An event that occurs at a specified height on the Zcash …","The Nu5 network upgrade.","The consensus rules deployed by <code>NetworkUpgrade::Nu5</code>.","The Overwinter network upgrade.","The consensus rules deployed by <code>NetworkUpgrade::Overwinter</code>.","Zcash consensus parameters.","The Sapling network upgrade.","The consensus rules deployed by <code>NetworkUpgrade::Sapling</code>.","The consensus rules at the launch of Zcash.","","Marker struct for the test network.","","The ZFUTURE network upgrade.","Candidates for future consensus rules; this branch will …","","Returns the activation height for a particular network …","","","","","","Returns the human-readable prefix for Base58Check-encoded …","","","","Returns the human-readable prefix for Base58Check-encoded …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The coin type for ZEC, as defined by SLIP 44.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the branch ID corresponding to the consensus rule …","","","","","","","","","","Returns the range of heights for the consensus epoch …","Returns the range of heights for the consensus epoch …","Returns the human-readable prefix for Bech32-encoded …","","","","Returns the human-readable prefix for Bech32-encoded …","","","","Returns the Bech32-encoded human-readable prefix for …","","","","","","","","","","","","","","","","Determines whether the specified network upgrade is active …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","BLAKE2s Personalization for CRH^ivk = BLAKE2s(ak | nk)","First 64 bytes of the BLAKE2s input during group hash. …","BLAKE2s Personalization for the group hash for key …","The note commitment is randomized over this generator.","The node commitment is randomized again by the position in …","BLAKE2s Personalization for the nullifier position …","The maximum number of chunks per segment of the Pedersen …","The exp table for <code>PEDERSEN_HASH_GENERATORS</code>.","The window size for exponentiation of Pedersen hash …","The generators (for each segment) used in all Pedersen …","BLAKE2s Personalization for Pedersen hash generators.","BLAKE2s Personalization for PRF^nf = BLAKE2s(nk | rho)","BLAKE2s Personalization for the proof generation key base …","The prover will demonstrate knowledge of discrete log with …","The spender proves discrete log with respect to this base …","BLAKE2s Personalization for the spending key base point","BLAKE2s Personalization for the value commitment generator …","The value commitment is randomized over this generator, …","The value commitment is used to check balance between …","","","","","","","","","","Constants for the Zcash main network.","Regtest constants","Constants for the Zcash test network.","","","","","The prefix for a Base58Check-encoded mainnet …","The prefix for a Base58Check-encoded mainnet …","The mainnet coin type for ZEC, as defined by SLIP 44.","The HRP for a Bech32-encoded mainnet <code>ExtendedFullViewingKey</code>…","The HRP for a Bech32-encoded mainnet <code>ExtendedSpendingKey</code>.","The HRP for a Bech32-encoded mainnet <code>PaymentAddress</code>.","The prefix for a Base58Check-encoded regtest …","The prefix for a Base58Check-encoded regtest …","The regtest cointype reuses the testnet cointype","The HRP for a Bech32-encoded regtest <code>ExtendedFullViewingKey</code>…","The HRP for a Bech32-encoded regtest <code>ExtendedSpendingKey</code>.","The HRP for a Bech32-encoded regtest <code>PaymentAddress</code>.","The prefix for a Base58Check-encoded testnet …","The prefix for a Base58Check-encoded testnet …","The testnet coin type for ZEC, as defined by SLIP 44.","The HRP for a Bech32-encoded testnet <code>ExtendedFullViewingKey</code>…","The HRP for a Bech32-encoded testnet <code>ExtendedSpendingKey</code>.","The HRP for a Bech32-encoded testnet <code>PaymentAddress</code>.","Core traits and structs for Transparent Zcash Extensions.","","A typesafe wrapper for witness payloads","","","","","Extension-specific error type. This should encompass both …","This is the primary trait which must be implemented by an …","An interface for transaction builders which support …","Binary parsing capability for TZE preconditions &amp; …","","A condition that can be used to encumber transparent funds.","Extension-specific precondition type. The extension will …","","Binary serialization capability for TZE preconditions &amp; …","Data that satisfies the precondition for prior encumbered …","Extension-specific witness type. The extension will need …","Adds a TZE input to the transaction by providing a witness …","Adds a TZE precondition to the transaction which must be …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Produce the intermediate format for an extension-specific …","","Produce the intermediate format for an extension-specific …","","","Parses an extension-specific witness or precondition from …","","","","","","","","","","","","","","","","","","","","Returns a serialized payload and its corresponding mode.","","","","","","","","","","Attempt to parse an extension-specific precondition value …","Attempt to parse an extension-specific witness value from …","","","","","This is a convenience method intended for use by consensus …","This is the primary method that an extension must …","","","","","","","","","A serialized script, used inside transparent inputs and …","","A transparent address corresponding to either a public key …","Returns the address that this Script contains, if any.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Generate the <code>scriptPubKey</code> corresponding to this address.","","","","","","","","","","","","","","","","","A memo field containing arbitrary bytes.","An empty memo field.","Errors that may result from attempting to construct an …","Some unknown memo format from ✨<em>the future</em>✨ that we can…","","An unencrypted memo received alongside a shielded note in …","The unencrypted memo bytes received alongside a shielded …","A memo field containing a UTF-8 string.","Type-safe wrapper around String to enforce memo length …","","Returns the raw byte array containing the memo bytes, …","Returns a slice of the raw bytes, excluding null padding.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Creates a <code>MemoBytes</code> indicating that no memo is present.","Serializes the <code>Memo</code> per ZIP 302.","","","","","","","","","","Serializes the <code>Memo</code> per ZIP 302.","","Serializes the <code>Memo</code> per ZIP 302.","","","Creates a <code>MemoBytes</code> from a slice, exactly as provided.","Parses a <code>Memo</code> from its ZIP 302 serialization.","Returns a <code>Memo</code> containing the given string, or an error if …","","","","","","","","","","","","","","","","","","","","Parses a <code>Memo</code> from its ZIP 302 serialization.","","","","","","","","","","","","","","","","","","A Merkle tree of note commitments.","A hashable node within a Merkle tree.","A hashable node within a Merkle tree.","An updatable witness to a path from a position in a …","A path from a position in a particular commitment tree to …","Adds a leaf node to the tree.","Tracks a leaf node that has been added to the underlying …","","Returns a blank leaf node.","","","","","","","","","","","","","Returns the parent node within the tree of the two given …","","","","","","","","","","Creates an empty tree.","Returns the empty root for the given depth.","","","","","","","Constructs a Merkle path directly from a path and position.","Reads a Merkle path from its serialized form.","Creates an <code>IncrementalWitness</code> for the most recent …","Implementations of serialization and parsing for Orchard …","","","","","","","","Returns the current witness, or None if the tree is empty.","Returns the position of the witnessed leaf node in the …","","Parses a node from the given byte source.","Parses a node from the given byte source.","Reads a <code>CommitmentTree</code> from its serialized form.","Reads an <code>IncrementalWitness</code> from its serialized form.","Returns the current root of the tree.","Returns the current root of the tree corresponding to the …","Returns the root of the tree corresponding to this path …","Returns the number of leaf nodes in the tree.","","","","","","","","","","","","","","","","","","Serializes this node.","Serializes this node.","Serializes this tree as an array of bytes.","Serializes this <code>IncrementalWitness</code> as an array of bytes.","","","","","","","","","","","","","","","","","","","","","","","","","","","A node within the Sapling commitment tree.","","","Typesafe wrapper for nullifier values.","A Sapling payment address.","","Enum for note randomness before and after ZIP 212.","","","","","","","","","","Returns a blank leaf node.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Computes the note commitment","Returns the parent node within the tree of the two given …","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the derived <code>esk</code> if this note was created after ZIP …","Returns the <code>Diversifier</code> for this <code>PaymentAddress</code>.","","","","","","","","","","","","","Returns the empty root for the given depth.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Parses a PaymentAddress from bytes.","Constructs a PaymentAddress from a diversifier and a …","","","","The diversified base of the address, GH(d)","","Implementation of group hashing into Jubjub.","","","","","","","","","","","","","","","","","","","","","","","","Sapling key components.","Compute a parent node in the Sapling commitment tree given …","","","","","","Computes the nullifier given the viewing key and note …","","Implementation of in-band secret distribution for Zcash …","","Implementation of the Pedersen hash function used in …","Returns <code>pk_d</code> for this <code>PaymentAddress</code>.","The public key of the address, g_d^ivk","Abstractions over the proving system and parameters.","","","","Parses a node from the given byte source.","Implementation of RedJubjub, a specialization of RedDSA to …","","rseed","Create the spendAuthSig for a Sapling SpendDescription.","","Returns the byte encoding of this <code>PaymentAddress</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The value of the note","","","","","","","","","","","","Serializes this node.","","","","Produces a random point in the Jubjub curve. The point is …","","A Sapling expanded spending key","A Sapling full viewing key","An outgoing viewing key","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","PRF^expand(sk, t) := BLAKE2b-512(“Zcash_ExpandSeed”, …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Sapling KDF for note encryption.","","","","","","Sapling PRF^ock.","Sapling key agreement for note encryption.","Creates a new encryption context for the given note.","","","","","Recovery of the full note plaintext by the sender.","Recovery of the full note plaintext by the sender.","","","","","","","","","","","","","","","","","","","","","","","","Type for persisting any necessary context across multiple …","Interface for creating zero-knowledge proofs for shielded …","Create the <code>bindingSig</code> for a Sapling transaction. All calls …","","Instantiate a new Sapling proving context.","Create the value commitment and proof for a Sapling …","Create the value commitment, re-randomized key, and proof …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The","","","Authorization state for a bundle of transaction data.","","","","","","","","","","","","","A Zcash transaction.","","","","","","","","The set of defined transaction format versions.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Structs for building transactions.","","","","","","","","","","","","","Structs representing the components within Zcash …enerates a <code>Transaction</code> from its inputs and outputs.","","","","","Reports on the progress made by the builder towards …","","","","Adds a Sapling address to send funds to.","Adds a Sapling note to be spent in this transaction.","Adds a transparent coin to be spent in this transaction.","Adds a transparent address to send funds to.","","","","","","","","","Builds a transaction from the configured spends and …","Returns the number of steps completed so far while …","","","","","","","","","","Returns the total expected number of steps before this …","","","","","","","","","","","","","","","","Creates a new <code>Builder</code> targeted for inclusion in the block …","Creates a new <code>Builder</code> targeted for inclusion in the block …","Sets the Sapling address to which any change will be sent.","Creates a new <code>Builder</code> targeted for inclusion in the block …","","","","","","","","","","","","","","Sets the notifier channel, where progress of building the …","","","","","","","","","Structs representing the components within Zcash …","Structs representing the components within Zcash …","Structs representing the TZE components within Zcash …","A type-safe representation of some quantity of Zcash.","","","","","","","","","","","","","","","","","","","Creates an Amount from an i64.","Reads an Amount from a signed 64-bit little-endian integer.","Creates a non-negative Amount from an i64.","Reads a non-negative Amount from a signed 64-bit …","Creates an Amount from a u64.","Reads an Amount from an unsigned 64-bit little-endian …","","","Returns <code>true</code> if <code>self</code> is negative and <code>false</code> if the Amount …","Returns <code>true</code> if <code>self</code> is positive and <code>false</code> if the Amount …","","","","","","","Returns the Amount encoded as a signed 64-bit …","","","","","","","","Returns a zero-valued Amount.","","","","","","","Marker for a bundle with no proofs or signatures.","","","","","","","","","","","","","","","","","Reads an <code>orchard::Bundle</code> from a v5 transaction format.","","","","","","","","","","","","Writes an <code>orchard::Bundle</code> in the v5 transaction format.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Types and functions for building Sapling transaction …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Consensus rules (§7.3) &amp; (§7.4):","","Consensus rules (§4.4) &amp; (§4.5):","Consensus rules (§4.4):","Consensus rules (§4.4):","Consensus rules (§4.4) &amp; (§4.5):","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Metadata about a transaction created by a <code>SaplingBuilder</code>.","","","","Adds a Sapling address to send funds to.","Adds a Sapling note to be spent in this transaction.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Send change to the specified change address. If no change …","","","","","","","","","","","","","Returns the index within the transaction of the …","Returns the index within the transaction of the …","","","","","","","","","","","","","","","","","","","","","Returns the net value represented by the spends and …","","","","","","","","produce an output description with invalid data (useful …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Types and functions for building transparent transaction …ypes and functions for building TZE transaction components","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Convenience constructor","","","","Read witness metadata &amp; payload","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Write prevout, extension, and mode followed by witness …","","Write without witness data (for signature hashing)","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Digester which constructs a digest of only the witness …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Abstraction over a reader which SHA-256d-hashes the data …","Abstraction over a writer which SHA-256d-hashes the data …","","","","","","","","","","","","","","","","","","","","Destroy this reader and return the hash of what was read.","Destroy this writer and return the hash of what was …","Construct a new <code>HashReader</code> given an existing <code>reader</code> by …","","","","","","","","","","","","","A child index for a derived key","","A key used to derive diversifiers for a particular child …","","A Sapling extended spending key","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the first index starting from j that generates a …","","","","","","","","","","","","","","","","","","","","","","","","Returns the child key corresponding to the path derived …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Entropy was not a multiple of 32 bits or between 128-256n …","Mnemonic only support 12/15/18/21/24 words.","Determines the words count that will be present in a …","The Czech language.","The English language.","The BIP-0039 error.","The French language.","The mnemonic has an invalid checksum.","The Italian language.","The Japanese language.","The Korean language.","Language to be used for the mnemonic phrase.","A mnemonic representation.","The Portuguese language.","The Simplified Chinese language.","The Spanish language.","The Traditional Chinese language.","Mnemonic contains an unknown word.","12 words, entropy length: 128 bits, the checksum length: 4 …","15 words, entropy length: 160 bits, the checksum length: 5 …","18 words, entropy length: 192 bits, the checksum length: 6 …","21 words, entropy length: 224 bits, the checksum length: 7 …","24 words, entropy length: 256 bits, the checksum length: 8 …","The list of supported languages. Language support is …","","","","","","","","","","Returns the number of checksum bits.","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the original entropy of the mnemonic phrase.","Returns the number of entropy bits.","","","","","","","","","","","","","","","","","Creates a new English <code>Mnemonic</code> from the given entropy.","Creates a new <code>Mnemonic</code> in the specified language from the …","Creates a <code>Mnemonic</code> from an existing mnemonic phrase.","Creates a <code>Mnemonic</code> from an existing mnemonic phrase in the …","","Generates a new English <code>Mnemonic</code> randomly in the specified …","Generates a new <code>Mnemonic</code> randomly in the specified …","","","","","","","","","","","","Consumes the <code>Mnemonic</code> and return the entropy as a <code>Vec&lt;u8&gt;</code>.","Consumes the <code>Mnemonic</code> and return the phrase as a <code>String</code>.","Returns the <code>Language</code> of the mnemonic.","","","","","","Returns the mnemonic phrase as a string slice.","","","","","Generates the seed from the <code>Mnemonic</code> and the passphrase.","","","","","Returns the number of entropy+checksum bits.","","","","","","","","","","","","","","Validates the word count and checksum of an English …","Validates the word count and checksum of a mnemonic phrase …","","","","","Returns the number of words.","Returns words from the word list that start with the given …","","","",""],"i":[0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,2,3,2,1,3,2,1,1,1,3,3,2,1,3,2,1,3,2,1,1,2,1,1,2,3,2,1,1,3,1,3,2,1,3,2,1,2,1,2,2,3,2,2,1,1,3,2,1,3,2,1,3,2,1,2,3,2,1,3,0,4,5,0,4,5,0,4,5,0,0,6,0,0,4,5,4,5,0,4,5,5,0,0,6,4,5,0,7,8,9,6,10,10,7,8,9,6,7,8,9,6,10,8,9,6,4,5,10,8,9,6,4,5,10,8,9,6,4,5,10,8,9,6,4,5,10,7,8,9,6,10,8,9,6,4,5,10,8,9,6,4,5,10,8,9,6,4,5,10,8,9,6,5,10,10,8,9,6,4,4,5,5,10,10,8,9,6,4,5,10,10,5,5,7,8,9,6,7,8,9,6,7,8,9,6,10,8,9,6,4,5,10,8,9,6,4,5,7,10,10,5,10,10,0,10,8,9,6,4,5,10,4,10,10,10,10,8,9,6,4,5,5,10,8,9,6,4,5,10,8,9,6,4,5,10,8,9,6,4,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,11,11,11,11,11,11,11,11,11,0,0,0,11,11,11,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12,0,13,13,0,14,15,0,0,0,16,0,15,16,0,0,15,13,13,12,17,18,16,12,17,18,16,12,17,18,12,17,18,12,17,18,16,12,17,18,16,12,17,18,16,12,17,18,16,17,18,12,17,18,16,16,12,17,17,18,18,16,14,12,17,18,16,12,17,18,16,17,18,12,17,18,16,17,18,12,17,18,19,16,12,17,18,16,12,17,18,16,17,18,12,17,18,16,15,15,12,17,18,16,20,21,22,23,0,23,0,22,22,23,22,23,22,23,22,23,22,22,23,22,23,22,23,22,23,22,23,22,23,23,22,23,22,23,22,23,23,22,23,22,0,22,23,22,23,22,23,22,23,22,23,22,24,25,0,26,26,0,26,27,0,0,26,0,27,28,28,27,28,29,26,27,28,29,26,28,29,26,28,29,26,28,26,27,28,29,29,26,27,28,29,26,27,28,29,26,28,26,27,28,29,26,27,27,28,26,27,28,28,28,29,26,28,26,26,27,28,29,26,27,28,29,26,27,29,28,28,29,26,27,27,28,29,26,26,27,28,29,26,27,28,29,26,27,28,29,26,30,31,32,33,34,0,0,0,0,0,35,36,37,38,35,36,37,35,36,37,35,36,37,35,36,37,38,35,36,37,35,36,37,35,36,37,35,38,37,35,37,35,36,37,37,37,36,0,35,36,37,35,36,37,37,36,36,37,38,39,35,36,35,36,37,35,0,35,35,36,37,35,36,37,35,36,37,35,36,37,35,36,37,38,39,35,36,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,40,41,42,43,43,0,0,0,0,0,0,0,0,0,0,0,0,0,44,45,42,42,46,46,47,44,45,40,41,48,43,42,49,50,46,47,44,45,40,41,48,43,42,49,50,46,47,44,45,40,41,48,43,42,49,50,46,47,44,45,40,41,48,43,42,49,50,50,46,46,47,48,42,46,47,44,45,40,41,48,43,42,49,50,46,47,44,45,40,41,48,43,42,49,50,50,48,46,47,44,45,40,41,48,43,42,49,50,46,46,46,42,42,46,41,48,42,49,50,46,45,40,41,48,43,42,49,50,46,47,44,45,40,41,48,43,42,49,50,48,48,42,41,48,50,50,0,46,47,44,45,40,41,48,43,42,49,50,46,47,44,45,40,41,48,43,42,49,50,45,0,0,46,41,42,49,46,50,45,0,44,0,48,50,0,47,50,46,46,0,45,50,0,0,48,46,47,44,45,40,41,48,43,42,49,50,45,40,40,42,44,46,47,44,45,40,41,48,43,42,49,49,50,46,47,44,45,40,41,48,43,42,49,50,46,47,44,45,40,41,48,43,42,49,50,50,0,47,50,46,47,44,45,40,41,48,43,42,49,50,46,46,51,52,0,53,0,0,0,0,54,53,54,55,53,54,55,53,54,55,53,54,55,53,54,55,53,54,55,53,54,55,53,53,55,53,54,55,55,54,53,54,55,53,54,55,53,54,54,55,0,0,54,54,55,0,54,55,53,54,55,53,54,55,53,54,55,53,54,55,55,53,54,55,54,55,0,0,0,0,0,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,0,0,0,0,56,56,0,0,0,0,56,56,57,57,0,57,57,57,57,57,57,57,57,57,57,57,0,57,57,57,57,57,58,59,0,59,0,59,59,59,0,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,61,62,0,0,0,0,0,61,63,64,62,61,63,64,62,64,62,64,62,61,63,64,62,61,63,64,62,61,63,64,62,64,62,61,63,64,62,62,61,63,64,62,61,63,64,62,61,62,61,64,62,61,64,62,61,63,64,62,61,63,64,62,61,63,64,62,62,62,61,63,64,62,61,64,62,0,0,0,0,0,0,0,0,0,65,0,65,66,67,65,68,68,67,65,68,0,0,0,67,65,0,0,0,0,67,65,0,0,68,68,69,70,71,72,73,66,69,68,70,74,75,76,71,72,73,66,69,68,70,74,75,76,0,69,68,74,75,76,69,68,74,75,76,69,65,0,73,71,72,73,66,69,68,70,70,74,75,76,71,72,73,66,69,68,70,74,75,76,73,65,65,65,65,65,71,72,73,66,69,68,70,74,75,76,69,68,70,73,73,69,69,68,70,73,71,72,73,66,69,68,70,74,75,76,69,73,68,68,68,68,68,69,68,76,71,72,73,66,69,68,70,74,75,76,75,71,72,73,66,69,68,70,74,75,76,69,68,73,76,74,75,69,74,75,74,69,68,70,73,76,73,74,0,0,0,73,68,0,69,68,74,75,76,69,73,76,71,72,73,66,69,68,70,74,75,76,71,72,73,66,69,68,70,74,75,76,0,70,71,72,73,66,69,68,70,74,75,76,73,76,0,73,68,71,72,73,66,69,68,70,74,75,76,69,68,70,70,70,70,70,70,70,77,0,78,0,78,78,0,78,78,78,79,79,79,79,79,79,80,79,78,80,79,78,79,80,80,79,78,80,79,78,80,79,78,80,78,78,78,80,79,78,80,79,78,80,79,78,79,78,80,79,79,79,79,78,80,79,78,80,79,78,80,79,78,80,79,78,79,81,82,83,84,0,0,0,0,0,0,0,0,0,0,0,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,0,85,85,85,85,85,85,85,85,85,0,0,0,0,0,0,0,86,86,86,86,86,86,86,86,86,0,0,0,0,0,0,0,0,0,0,0,86,86,86,86,0,0,0,0,0,0,0,0,0,87,0,0,0,0,0,0,0,87,0,0,0,88,88,89,89,90,91,92,90,89,88,93,94,95,91,92,90,89,88,93,94,95,0,92,90,89,88,93,94,95,92,90,89,88,93,94,95,91,94,91,94,95,88,93,94,95,91,92,90,89,88,93,94,95,91,92,90,89,88,93,94,95,91,92,90,89,88,93,94,95,91,94,91,94,95,91,94,91,94,95,92,92,90,89,88,94,91,91,92,90,89,88,93,94,95,91,92,90,89,88,93,94,95,91,92,90,89,88,93,94,95,95,93,88,93,94,95,88,93,94,95,0,88,0,88,88,0,88,93,89,89,88,0,92,90,89,88,93,94,95,91,92,90,89,88,93,94,95,91,92,90,89,88,93,94,95,91,92,90,89,88,93,94,95,89,91,92,90,89,88,93,94,95,88,94,94,88,88,94,96,96,0,96,96,0,0,0,96,0,97,97,97,96,98,99,100,97,96,98,99,100,97,98,99,100,98,99,100,97,96,98,99,100,97,96,98,99,100,97,96,98,99,100,99,96,99,96,96,98,99,100,97,96,98,99,100,97,97,96,98,99,100,97,96,98,99,100,99,97,99,99,0,98,99,100,96,97,96,98,99,100,97,96,98,99,100,97,96,98,99,100,97,97,96,98,99,100,0,0,0,0,0,101,102,101,102,102,102,101,102,101,102,101,102,101,102,101,102,101,102,101,102,101,101,101,102,102,101,102,101,102,101,102,101,102,102,0,0,0,0,103,0,0,104,104,105,104,106,107,108,105,104,106,107,108,0,105,104,106,107,108,105,104,106,107,108,105,104,106,107,108,105,104,106,107,108,105,104,106,107,108,105,104,106,107,108,105,104,106,107,108,105,104,106,107,108,106,105,104,106,107,108,105,104,106,107,108,106,104,106,107,108,106,107,107,106,107,108,108,107,107,0,105,104,106,107,108,105,104,106,107,108,105,104,106,107,108,105,104,106,107,108,108,104,104,105,104,106,107,108,106,107,108,0,109,109,0,0,110,110,110,109,111,110,109,111,110,111,111,110,109,111,110,109,111,110,109,111,110,109,109,109,111,110,109,111,110,109,111,110,109,111,111,109,110,109,111,110,109,111,110,109,111,110,110,109,111,0,0,0,0,0,0,0,0,0,0,0,0,112,113,114,113,115,116,117,114,113,115,116,117,0,114,113,115,116,117,114,113,115,116,117,114,113,115,116,117,114,113,115,116,117,114,113,115,116,117,114,113,115,116,117,114,113,115,116,117,114,113,115,116,117,114,113,115,116,117,114,113,115,116,117,113,115,113,115,116,117,115,116,117,116,115,116,117,0,114,113,115,116,117,114,113,115,116,117,114,113,115,116,117,115,114,113,115,116,117,117,113,113,114,113,115,116,117,116,115,116,117,116,0,118,0,0,0,118,119,119,120,119,118,121,120,119,118,121,119,121,121,120,119,118,121,120,119,118,121,120,119,118,121,119,118,121,118,118,121,120,119,118,121,120,119,118,121,120,119,118,121,118,121,118,120,119,118,121,120,119,118,121,120,119,118,121,119,120,119,118,121,122,122,0,0,0,0,0,0,0,0,0,0,0,123,0,0,123,0,123,0,124,125,126,123,124,125,126,123,124,125,126,123,124,125,126,123,124,125,126,123,124,125,126,123,124,125,126,125,126,123,124,125,126,123,124,125,126,126,125,0,123,125,126,123,124,125,126,123,124,125,126,123,124,123,125,126,125,126,123,124,127,128,0,0,0,0,0,0,0,0,129,130,129,130,129,130,129,130,129,130,129,130,129,130,129,130,129,130,129,130,129,130,129,130,129,130,129,130,0,129,130,129,130,129,130,129,130,0,0,0,131,132,131,132,132,131,132,131,132,131,132,132,131,132,131,132,131,132,131,131,132,131,131,131,132,131,132,131,132,131,132,132,133,134,0,0,0,0,0,135,135,0,0,136,135,133,134,137,136,135,133,134,137,136,135,133,134,137,136,135,133,134,137,136,133,137,136,135,133,134,137,136,135,133,134,137,136,137,136,134,135,133,134,137,136,135,133,134,137,136,137,135,133,134,137,136,135,133,134,137,136,136,135,137,136,133,135,133,134,137,136,135,133,134,137,136,134,137,135,133,134,133,137,136,0,135,133,134,137,136,135,133,134,137,136,135,133,134,137,136,135,133,134,137,136,135,133,134,137,136,137,136,138,139,0,140,140,0,141,141,0,141,140,141,141,141,0,0,141,141,141,141,140,142,142,142,142,142,141,143,140,141,142,143,140,141,142,143,142,140,141,142,143,140,141,142,143,141,142,143,141,142,140,141,142,143,140,141,142,143,140,141,142,143,143,143,142,140,141,142,143,140,140,141,141,142,142,143,143,140,141,142,143,143,143,143,143,143,143,143,141,142,143,140,141,142,143,140,141,142,143,143,143,143,140,143,141,142,143,143,140,141,142,143,143,140,141,142,143,142,140,141,142,142,143,140,141,142,143,140,141,142,143,143,143,140,141,142,143,142,141,143,144,145,146],"f":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[],["blockhash",3]],[[]],[[],["blockheaderdata",3]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["blockhash",3]],["bool",15]],null,[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[],[["result",6,["blockheader"]],["blockheader",3]]],[[]],[[]],[[]],[[]],[[],["blockhash",3]],[[]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[]],[[]],[[]],null,[[["blockhash",3]],["bool",15]],null,null,[[["read",8]],["result",6]],null,null,[[]],[[],["string",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],null,[[]],[[]],[[]],[[["write",8]],["result",6]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["networkupgrade",4]],[["option",4,["blockheight"]],["blockheight",3]]],[[["networkupgrade",4]],[["option",4,["blockheight"]],["blockheight",3]]],[[["networkupgrade",4]],[["option",4,["blockheight"]],["blockheight",3]]],[[["networkupgrade",4]],[["option",4,["blockheight"]],["blockheight",3]]],[[]],[[["u32",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["blockheight",3]],[[],["mainnetwork",3]],[[],["testnetwork",3]],[[],["network",4]],[[],["networkupgrade",4]],[[],["branchid",4]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["ordering",4]],[[],["u32",15]],[[],["u32",15]],[[],["u32",15]],[[],["u32",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["blockheight",3]],["bool",15]],[[["mainnetwork",3]],["bool",15]],[[["testnetwork",3]],["bool",15]],[[["network",4]],["bool",15]],[[["branchid",4]],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["blockheight",3]]],[[]],[[["u32",15]]],[[]],[[]],[[]],[[]],[[]],[[["u32",15]],["blockheight",3]],[[]],[[],["option",4]],[[],["option",4]],[[],["str",15]],[[],["str",15]],[[],["str",15]],[[],["str",15]],[[],["str",15]],[[],["str",15]],[[],["str",15]],[[],["str",15]],[[],["str",15]],[[],["str",15]],[[],["str",15]],[[],["str",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[["networkupgrade",4],["blockheight",3]],["bool",15]],[[["blockheight",3]],["bool",15]],[[],[["option",4,["ordering"]],["ordering",4]]],[[],["bool",15]],[[["u32",15]]],[[]],null,[[]],[[]],[[]],[[]],[[]],[[]],[[],["string",3]],[[],["string",3]],[[["u64",15]],["result",4]],[[],["result",4]],[[["i64",15]],["result",4]],[[["i32",15]],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["u32",15]],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["branchid",4]]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[],["vec",3]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[],["usize",15]],[[]],null,null,null,[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["u32",15]],["result",4]],[[["u32",15],["amount",3]],["result",4]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["authdata",3]],[[],["precondition",3]],[[],["witness",3]],[[]],[[]],[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["authdata",3]],["bool",15]],[[["precondition",3]],["bool",15]],[[["witness",3]],["bool",15]],[[["error",4]],["bool",15]],null,null,[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[["u32",15]],["precondition",3]],[[]],[[["u32",15]],[["authdata",3],["witness",3,["authdata"]]]],[[]],[[]],[[["u32",15]],["result",4]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[]],[[]],[[]],[[]],null,null,[[["authdata",3]],["bool",15]],[[["precondition",3]],["bool",15]],[[["witness",3]],["bool",15]],[[["error",4]],["bool",15]],null,null,[[]],[[]],[[]],[[]],[[],["string",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],[["result",4],["frompayload",8]]],[[],[["result",4],["frompayload",8]]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[["precondition",3],["witness",3]],["result",4]],[[],["result",4]],[[]],[[]],[[]],[[]],null,null,null,null,null,null,null,[[],[["option",4,["transparentaddress"]],["transparentaddress",4]]],[[]],[[]],[[]],[[]],[[],["script",3]],[[],["transparentaddress",4]],[[]],[[]],[[],["script",3]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["script",3]],["bool",15]],[[["transparentaddress",4]],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[],["usize",15]],[[],["usize",15]],[[]],[[]],[[["script",3]],["bool",15]],[[["transparentaddress",4]],["bool",15]],[[["transparentaddress",4]],[["option",4,["ordering"]],["ordering",4]]],[[["read",8]],["result",6]],[[],["script",3]],[[]],null,[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[]],[[]],[[["write",8]],["result",6]],null,null,[[]],null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["memobytes",3]],[[],["textmemo",3]],[[],["memo",4]],[[]],[[]],[[]],[[],["ordering",4]],[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[],["str",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[],["memobytes",3]],[[["error",4]],["bool",15]],[[["memobytes",3]],["bool",15]],[[["textmemo",3]],["bool",15]],[[["memo",4]],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[["memo",4]]],[[]],[[["memo",4]]],[[]],[[]],[[],[["error",4],["result",4,["error"]]]],[[],[["error",4],["result",4,["error"]]]],[[["str",15]],["result",4]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[]],[[]],[[]],[[]],[[["error",4]],["bool",15]],[[["textmemo",3]],["bool",15]],[[],[["option",4,["ordering"]],["ordering",4]]],[[]],[[]],[[]],[[],["string",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["memobytes",3]],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[]],[[]],[[]],[[]],null,null,null,null,null,null,null,null,null,null,[[],["result",4]],[[],["result",4]],null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["commitmenttree",3]],[[],["incrementalwitness",3]],[[],["merklepath",3]],[[]],[[]],[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[["usize",15]]],[[["merklepath",3]],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[["vec",3],["u64",15]]],[[],["result",4]],[[["commitmenttree",3]],["incrementalwitness",3]],null,[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[]],[[]],[[]],[[["merklepath",3]],["bool",15]],[[],[["option",4,["merklepath"]],["merklepath",3]]],[[],["usize",15]],null,[[["read",8]],["result",6]],[[["read",8]],["result",6]],[[["read",8]],["result",6]],[[["read",8]],["result",6]],[[]],[[]],[[]],[[],["usize",15]],null,[[],["frontier",3]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[]],[[]],[[]],[[["write",8]],["result",6]],[[["write",8]],["result",6]],[[["write",8]],["result",6]],[[["write",8]],["result",6]],null,null,null,[[["read",8]],[["result",6,["authfragment"]],["authfragment",3]]],[[["read",8]],[["result",6,["merklebridge"]],["merklebridge",3]]],[[["read",8]],[["checkpoint",4],["result",6,["checkpoint"]]]],[[["read",8]],[["result",6,["frontier"]],["frontier",3]]],[[["read",8]],[["result",6,["frontier"]],["frontier",3]]],[[["read",8]],[["result",6,["nonemptyfrontier"]],["nonemptyfrontier",3]]],[[["read",8]],[["position",3],["result",6,["position"]]]],[[["read",8]],[["bridgetree",3],["result",6,["bridgetree"]]]],[[["read",8]],[["result",6,["bridgetree"]],["bridgetree",3]]],[[["authfragment",3],["write",8]],["result",6]],[[["merklebridge",3],["write",8]],["result",6]],[[["checkpoint",4],["write",8]],["result",6]],[[["frontier",3],["write",8]],["result",6]],[[["nonemptyfrontier",3],["write",8]],["result",6]],[[["bridgetree",3],["write",8]],["result",6]],[[["bridgetree",3],["write",8]],["result",6]],[[["usize",15],["strategy",8]]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[],["bitslice",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["node",3]],[[],["valuecommitment",3]],[[],["proofgenerationkey",3]],[[],["viewingkey",3]],[[],["saplingivk",3]],[[],["diversifier",3]],[[],["paymentaddress",3]],[[],["rseed",4]],[[],["nullifier",3]],[[],["notevalue",3]],[[],["note",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["scalar",3]],[[["usize",15]]],[[["altitude",3]]],[[],["subgrouppoint",3]],[[["u64",15],["rseed",4]],[["note",3],["option",4,["note"]]]],[[],["choice",3]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[],[["fr",3],["option",4,["fr"]]]],[[],["diversifier",3]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[["usize",15]]],[[["altitude",3]]],[[]],[[]],[[["node",3]],["bool",15]],[[["diversifier",3]],["bool",15]],[[],["bool",15]],[[["nullifier",3]],["bool",15]],[[["notevalue",3]],["bool",15]],[[],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["option",4]],[[["diversifier",3],["subgrouppoint",3]],["option",4]],[[],[["result",4,["nullifier","tryfromsliceerror"]],["nullifier",3],["tryfromsliceerror",3]]],[[],[["option",4,["subgrouppoint"]],["subgrouppoint",3]]],[[],[["option",4,["subgrouppoint"]],["subgrouppoint",3]]],null,[[],["fr",3]],null,[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["saplingivk",3]],null,[[["usize",15]]],[[["node",3]],["bool",15]],[[["diversifier",3]],["bool",15]],[[["nullifier",3]],["bool",15]],[[["notevalue",3]],["bool",15]],[[]],[[["u64",15],["viewingkey",3]],["nullifier",3]],null,null,null,null,[[],["subgrouppoint",3]],null,null,null,[[],["fr",3]],[[["read",8]],["result",6]],[[],[["result",4,["error"]],["error",3]]],null,[[["fr",3]],["subgrouppoint",3]],null,[[["fr",3],["privatekey",3]],["signature",3]],null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["diversifier",3]],[["option",4,["paymentaddress"]],["paymentaddress",3]]],[[["diversifier",3]],[["option",4,["paymentaddress"]],["paymentaddress",3]]],[[]],[[],[["u8",15],["vec",3,["u8"]]]],[[],["viewingkey",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["u64",15]],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["scalar",3]],null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],[["error",3],["result",4,["error"]]]],[[["write",8]],["result",6]],null,null,[[],[["option",4,["subgrouppoint"]],["subgrouppoint",3]]],null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[],["outgoingviewingkey",3]],[[],["expandedspendingkey",3]],[[]],[[]],[[]],[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["outgoingviewingkey",3]],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[["expandedspendingkey",3]]],[[]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[]],[[]],[[]],[[["outgoingviewingkey",3]],["bool",15]],null,null,null,[[],["blake2bhash",3]],[[],["blake2bhash",3]],[[],["proofgenerationkey",3]],[[["read",8]],["result",6]],[[["read",8]],["result",6]],null,[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],null,[[]],[[]],[[]],[[["write",8]],["result",6]],[[["write",8]],["result",6]],[[]],[[]],null,null,null,[[],["vec",3]],[[],[["option",4],["vec",3,["option"]]]],[[]],[[]],[[["fnonce",8],["note",3]],["notevalidity",4]],[[]],[[["usize",15]]],[[["usize",15]]],[[],["option",4]],[[["ephemeralkeybytes",3]],["outgoingcipherkey",3]],[[["usize",15]]],[[["ephemeralkeybytes",3]],["option",4]],[[],["ephemeralkeybytes",3]],[[],["option",4]],[[]],[[],["option",4]],[[["blockheight",3]]],[[]],[[]],[[],["usize",15]],[[]],[[]],[[]],[[]],[[["ephemeralkeybytes",3],["subgrouppoint",3]],["blake2bhash",3]],[[],["noteplaintextbytes",3]],[[],["outplaintextbytes",3]],[[],["option",4]],[[["ephemeralkeybytes",3]],["option",4]],[[["u8",15],["blockheight",3]],["bool",15]],[[["extendedpoint",3],["outgoingviewingkey",3],["ephemeralkeybytes",3]],["outgoingcipherkey",3]],[[["fr",3],["extendedpoint",3]],["subgrouppoint",3]],[[["memobytes",3],["option",4,["outgoingviewingkey"]],["note",3],["paymentaddress",3],["outgoingviewingkey",3]],[["noteencryption",3,["saplingdomain"]],["saplingdomain",3]]],[[],["result",4]],[[],["result",4]],[[["saplingivk",3],["blockheight",3]],["option",4]],[[["saplingivk",3],["blockheight",3]],["option",4]],[[["outputdescription",3],["blockheight",3],["outgoingviewingkey",3]],["option",4]],[[["outgoingcipherkey",3],["blockheight",3],["outputdescription",3]],["option",4]],[[],["typeid",3]],[[]],null,null,null,[[]],[[]],[[],["personalization",4]],[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[],[["bool",15],["vec",3,["bool"]]]],[[],["usize",15]],[[]],[[["personalization",4]],["subgrouppoint",3]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],null,null,null,[[["amount",3]],[["result",4,["signature"]],["signature",3]]],null,[[]],[[["paymentaddress",3],["u64",15],["fr",3]]],[[["u64",15],["scalar",3],["fr",3],["proofgenerationkey",3],["merklepath",3,["node"]],["rseed",4],["diversifier",3],["node",3]],["result",4]],null,[[["amount",3]],[["result",4,["signature"]],["signature",3]]],[[]],[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[],["usize",15]],[[]],[[]],[[["paymentaddress",3],["u64",15],["fr",3]]],[[["u64",15],["scalar",3],["fr",3],["proofgenerationkey",3],["merklepath",3,["node"]],["rseed",4],["diversifier",3],["node",3]],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],null,null,null,null,null,null,[[["subgrouppoint",3]],["bool",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["signature",3]],[[],["publickey",3]],[[]],[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[["privatekey",3],["subgrouppoint",3]]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[]],[[]],[[]],[[]],[[["fr",3]]],[[["subgrouppoint",3],["fr",3]]],[[["read",8]],["result",6]],[[["read",8]],["result",6]],[[["read",8]],["result",6]],[[["subgrouppoint",3]],["signature",3]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[["signature",3],["subgrouppoint",3]],["bool",15]],[[["bool",15],["subgrouppoint",3],["signature",3]],["bool",15]],[[]],[[]],[[]],[[]],[[["write",8]],["result",6]],[[["write",8]],["result",6]],[[["write",8]],["result",6]],[[]],[[["notevalue",3]]],[[]],[[]],[[["u64",15]]],[[["blockheight",3]],["rseed",4]],[[],["fr",3]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[],["blake2bhash",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,[[],["txid",3]],[[],["txversion",4]],[[],["transparentdigests",3]],[[],["tzedigests",3]],[[],["txdigests",3]],[[]],[[]],[[]],[[]],[[]],[[["txid",3]],["ordering",4]],[[]],null,[[],["branchid",4]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[],["transactiondata",3]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["transactiondigest",8]]],[[["u32",15],["txversion",4],["branchid",4],["blockheight",3]]],[[["bundle",3],["option",4,["bundle"]]]],[[["bundle",3],["option",4,["bundle"]]]],[[["option",4,["bundle"]],["bundle",3]]],[[["bundle",3],["option",4,["bundle"]]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["txid",3]],["bool",15]],[[["txversion",4]],["bool",15]],[[["transaction",3]],["bool",15]],[[],["blockheight",3]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[],[["result",6,["transaction"]],["transaction",3]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["option",4,["bundle"]],["bundle",3],["bundle",3],["option",4,["bundle"]],["branchid",4],["blockheight",3],["option",4,["bundle"]],["option",4,["bundle"]],["u32",15],["txversion",4],["bundle",3,["amount"]],["option",4,["bundle"]],["bundle",3],["bundle",3]]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[]],[[],["u32",15]],null,[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["txid",3]],["bool",15]],[[["txversion",4]],["bool",15]],[[],[["bundle",3],["option",4,["bundle"]]]],null,null,null,[[["txid",3]],[["option",4,["ordering"]],["ordering",4]]],null,null,null,[[["read",8]],["result",6]],[[["read",8]],["result",6]],[[["read",8],["branchid",4]],["result",6]],[[],[["bundle",3],["option",4,["bundle"]]]],null,[[],["amount",3]],null,null,null,null,[[],[["bundle",3],["option",4,["bundle"]]]],[[["branchid",4]]],null,[[]],[[]],[[]],[[]],[[]],[[],["string",3]],[[],[["option",4,["bundle"]],["bundle",3]]],null,[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],null,[[],["txid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],[["bundle",3],["option",4,["bundle"]]]],null,null,[[],["txversion",4]],[[],["u32",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["write",8]],["result",6]],[[["write",8]],["result",6]],[[["write",8]],["result",6]],[[["write",8]],["result",6]],[[["write",8]],["result",6]],[[["write",8]],["result",6]],[[["write",8]],["result",6]],[[["write",8]],["result",6]],[[["write",8]],["result",6]],null,null,null,null,null,null,null,null,null,null,[[["amount",3],["memobytes",3],["option",4,["outgoingviewingkey"]],["paymentaddress",3],["option",4,["memobytes"]],["outgoingviewingkey",3]],[["error",4],["result",4,["error"]]]],[[["extendedspendingkey",3],["merklepath",3,["node"]],["diversifier",3],["note",3],["node",3]],[["error",4],["result",4,["error"]]]],[[["outpoint",3],["secretkey",3],["txout",3]],[["error",4],["result",4,["error"]]]],[[["transparentaddress",4],["amount",3]],[["error",4],["result",4,["error"]]]],[[["u32",15]],["result",4]],[[["u32",15],["amount",3]],["result",4]],[[]],[[]],[[]],[[]],[[]],[[]],[[],[["result",4,["error"]],["error",4]]],[[],["u32",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[],[["option",4,["u32"]],["u32",15]]],[[["error",4]],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[]],[[]],[[]],[[],[["result",4,["error"]],["error",4]]],[[["error",4]],["bool",15]],[[["u32",15],["option",4,["u32"]]]],[[["blockheight",3]]],[[["blockheight",3]],["builder",3]],[[["paymentaddress",3],["outgoingviewingkey",3]]],[[["blockheight",3]],["builder",3]],[[],["string",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[]],[[]],[[]],[[["sender",3,["progress"]],["progress",3]]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["amount",3]],[["option",4,["amount"]],["amount",3]]],[[["amount",3]]],[[]],[[]],[[],["amount",3]],[[]],[[["amount",3]],["ordering",4]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[],["usize",15]],[[]],[[["amount",3]],["bool",15]],[[["formatter",3]],["result",6]],[[]],[[["i64",15]],["result",4]],[[],["result",4]],[[["i64",15]],["result",4]],[[],["result",4]],[[["u64",15]],["result",4]],[[],["result",4]],[[],["usize",15]],[[]],[[],["bool",15]],[[],["bool",15]],[[["amount",3]],["bool",15]],[[]],[[["amount",3]],[["option",4,["ordering"]],["ordering",4]]],[[["amount",3]],[["option",4,["amount"]],["amount",3]]],[[["amount",3]]],null,[[]],[[]],[[["i64",15]],["result",4]],[[["valuesum",3]],[["amount",3],["result",4,["amount"]]]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],null,null,null,null,[[]],[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["formatter",3]],["result",6]],[[]],[[],["usize",15]],[[]],[[["read",8]],[["result",6,["action"]],["action",3]]],[[["read",8]],[["anchor",3],["result",6,["anchor"]]]],[[["read",8]],[["result",6,["extractednotecommitment"]],["extractednotecommitment",3]]],[[["read",8]],[["flags",3],["result",6,["flags"]]]],[[["read",8]],[["result",6,["transmittednoteciphertext"]],["transmittednoteciphertext",3]]],[[["read",8]],[["result",6,["nullifier"]],["nullifier",3]]],[[["read",8]],[["result",6,["signature"]],["signature",3]]],[[["read",8]],[["result",6,["option"]],["option",4,["bundle"]]]],[[["read",8]],[["valuecommitment",3],["result",6,["valuecommitment"]]]],[[["read",8]],[["result",6,["verificationkey"]],["verificationkey",3,["spendauth"]]]],null,[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[["action",3],["write",8]],["result",6]],[[["extractednotecommitment",3],["write",8]],["result",6]],[[["transmittednoteciphertext",3],["write",8]],["result",6]],[[["nullifier",3],["write",8]],["result",6]],[[["write",8],["option",4,["bundle"]],["bundle",3]],["result",6]],[[["valuecommitment",3],["write",8]],["result",6]],[[["verificationkey",3],["write",8]],["result",6]],[[["usize",15]]],[[["txversion",4]]],null,null,null,null,null,null,null,null,null,null,null,null,null,[[["signature",3]],[["spenddescription",3,["authorized"]],["authorized",3]]],[[],[["error",4],["result",4,["error"]]]],null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,[[],["unproven",3]],[[],["authorized",3]],[[],["bundle",3]],[[],["spenddescription",3]],[[],["spenddescriptionv5",3]],[[],["outputdescription",3]],[[],["outputdescriptionv5",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,null,null,null,null,null,null,[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],null,null,null,[[],["ephemeralkeybytes",3]],[[],["ephemeralkeybytes",3]],null,null,null,[[["unproven",3]],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[]],[[["outputdescription",3]],["compactoutputdescription",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["grothproofbytes",6]],[["outputdescription",3,["grothproofbytes"]],["grothproofbytes",6]]],[[["signature",3],["scalar",3],["grothproofbytes",6]],[["spenddescription",3,["authorized"]],["authorized",3]]],null,null,null,null,[[["read",8]],["result",6]],[[],["result",6]],[[],["result",6]],[[],["result",6]],[[["str",15],["read",8]],[["result",6,["scalar"]],["scalar",3]]],[[["read",8]],[["nullifier",3],["result",6,["nullifier"]]]],[[["str",15],["read",8]],[["result",6,["extendedpoint"]],["extendedpoint",3]]],[[["read",8]],[["result",6,["publickey"]],["publickey",3]]],[[["read",8]],[["result",6,["signature"]],["signature",3]]],[[["read",8]],[["result",6,["grothproofbytes"]],["grothproofbytes",6]]],null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["write",8]],["result",6]],[[["write",8]],["result",6]],[[["write",8]],["result",6]],[[["write",8]],["result",6]],null,null,null,null,null,null,null,null,null,null,null,null,[[["amount",3],["memobytes",3],["option",4,["outgoingviewingkey"]],["rngcore",8],["paymentaddress",3],["option",4,["memobytes"]],["outgoingviewingkey",3]],[["error",4],["result",4,["error"]]]],[[["extendedspendingkey",3],["merklepath",3,["node"]],["rngcore",8],["diversifier",3],["note",3],["node",3]],[["error",4],["result",4,["error"]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["sender",3],["option",4,["sender"]],["rngcore",8],["blockheight",3]],[["option",4,["bundle"]],["error",4],["result",4,["option","error"]]]],[[],["spenddescriptioninfo",3]],[[],["saplingmetadata",3]],[[],["unauthorized",3]],[[]],[[]],[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[["error",4]],["bool",15]],[[["saplingmetadata",3]],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[]],[[]],[[]],[[]],[[]],[[],["option",4]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[]],[[]],[[]],[[]],[[]],[[["saplingmetadata",3]],["bool",15]],[[["blockheight",3]]],[[["usize",15]],[["usize",15],["option",4,["usize"]]]],[[["usize",15]],[["usize",15],["option",4,["usize"]]]],null,[[]],[[]],[[]],[[],["string",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["amount",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[["txversion",4]]],[[]],null,null,[[]],[[]],[[]],[[]],[[],["jsdescription",3]],[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["formatter",3]],["result",6]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[]],[[]],[[],["usize",15]],[[],["usize",15]],[[]],[[]],null,null,null,[[["read",8],["bool",15]],["result",6]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[]],[[]],[[["write",8]],["result",6]],null,null,null,null,null,null,null,[[["transactiondata",3],["txdigests",3]],[["bundle",3,["authorized"]],["authorized",3]]],null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,[[],["authorized",3]],[[],["bundle",3]],[[],["outpoint",3]],[[],["txin",3]],[[],["txout",3]],[[]],[[]],[[]],[[]],[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["authorized",3]],["bool",15]],[[["bundle",3]],["bool",15]],[[["outpoint",3]],["bool",15]],[[["txin",3]],["bool",15]],[[["txout",3]],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[]],[[]],[[]],[[]],[[]],[[],["u32",15]],[[["bundle",3]],["bool",15]],[[["outpoint",3]],["bool",15]],[[["txin",3]],["bool",15]],[[["txout",3]],["bool",15]],[[["u32",15]]],[[["outpoint",3]]],null,[[["read",8]],["result",6]],[[],["result",6]],[[],["result",6]],null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],null,null,null,[[]],[[]],[[]],[[]],[[]],[[["write",8]],["result",6]],[[["write",8]],["result",6]],[[["write",8]],["result",6]],null,null,null,null,null,[[["outpoint",3],["secretkey",3],["txout",3]],[["error",4],["result",4,["error"]]]],[[["transparentaddress",4],["amount",3]],[["error",4],["result",4,["error"]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[],[["option",4,["bundle"]],["bundle",3,["unauthorized"]]]],[[],["unauthorized",3]],[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[["error",4]],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[]],[[]],[[]],[[]],[[],["string",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],[["option",4,["amount"]],["amount",3]]],[[]],[[]],[[]],null,[[]],[[]],[[]],[[]],[[]],null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,[[],["authorized",3]],[[],["bundle",3]],[[],["outpoint",3]],[[],["tzein",3]],[[],["tzeout",3]],[[]],[[]],[[]],[[]],[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["authorized",3]],["bool",15]],[[["bundle",3]],["bool",15]],[[["outpoint",3]],["bool",15]],[[["tzein",3]],["bool",15]],[[["tzeout",3]],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[]],[[]],[[]],[[]],[[]],[[["vec",3,["tzesigner"]],["tzesigner",3,["transactiondata"]],["transactiondata",3]],[["error",4],["result",4,["bundle","error"]],["bundle",3,["authorized"]]]],[[],["u32",15]],[[["bundle",3]],["bool",15]],[[["outpoint",3]],["bool",15]],[[["tzein",3]],["bool",15]],[[["tzeout",3]],["bool",15]],[[["txid",3],["u32",15]]],[[["u32",15],["outpoint",3]]],null,null,[[["read",8]],["result",6]],[[],["result",6]],[[],["result",6]],null,[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["txid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],null,null,null,[[]],[[]],[[]],[[]],[[]],null,[[["write",8]],["result",6]],[[["write",8]],["result",6]],[[["write",8]],["result",6]],[[["write",8]],["result",6]],null,null,null,null,null,null,[[["u32",15]]],[[["u32",15],["amount",3]],[["result",4,["error"]],["error",4]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["unauthorized",3]],[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[["error",4]],["bool",15]],[[["unauthorized",3]],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[]],[[]],[[]],[[]],[[["error",4]],["bool",15]],[[]],[[],["string",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],[["option",4,["amount"]],["amount",3]]],[[]],[[]],[[]],[[]],null,null,[[["branchid",4]]],[[]],[[]],[[]],[[]],[[]],null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[]],[[]],[[]],[[]],[[["usize",15],["script",3],["amount",3]]],[[["usize",15],["precondition",3],["amount",3]]],[[],["precondition",3]],[[],["script",3]],[[["u32",15],["transactiondata",3],["signableinput",4],["txdigests",3]],["signaturehash",3]],[[["usize",15],["script",3],["amount",3]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[["usize",15],["precondition",3],["amount",3]]],[[],["amount",3]],[[],["amount",3]],[[]],[[]],[[]],[[]],null,null,[[["signableinput",4],["u32",15],["transactiondata",3]],["blake2bhash",3]],[[["u32",15],["signableinput",4],["transactiondata",3],["txdigests",3]],["blake2bhash",3]],[[["branchid",4]]],[[["branchid",4]]],[[["branchid",4]]],[[]],null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["u32",15],["txversion",4],["branchid",4],["blockheight",3]]],[[["u32",15],["txversion",4],["branchid",4],["blockheight",3]]],[[["bundle",3],["option",4,["bundle"]]]],[[["option",4,["bundle"]],["bundle",3]]],[[["bundle",3],["option",4,["bundle"]]]],[[["option",4,["bundle"]],["bundle",3]],["blake2bhash",3]],[[["option",4,["bundle"]],["bundle",3]]],[[["option",4,["bundle"]],["bundle",3]],["blake2bhash",3]],[[["bundle",3],["option",4,["bundle"]]]],[[["option",4,["bundle"]],["bundle",3]],["blake2bhash",3]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[],["usize",15]],[[],["usize",15]],[[]],[[]],[[["txdigests",3],["branchid",4],["txversion",4]],["txid",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[]],[[]],null,null,null,[[]],[[]],[[]],[[]],[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[],["result",6]],[[]],[[]],[[],["usize",15]],[[],["usize",15]],[[]],[[]],[[]],[[],[["output",6,["sha256"]],["sha256",3]]],[[],[["output",6,["sha256"]],["sha256",3]]],[[]],[[],[["usize",15],["result",6,["usize"]]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[]],[[]],[[],[["usize",15],["result",6,["usize"]]]],null,null,null,null,null,null,null,null,null,null,null,[[["diversifierindex",3]],["result",4]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["childindex",4]],[[],["diversifierindex",3]],[[],["diversifierkey",3]],[[],["extendedspendingkey",3]],[[],["extendedfullviewingkey",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["childindex",4]]],[[["childindex",4]],["result",4]],[[["diversifierindex",3]],["result",4]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["childindex",4]],["bool",15]],[[["diversifierindex",3]],["bool",15]],[[["diversifierkey",3]],["bool",15]],[[["extendedspendingkey",3]],["bool",15]],[[["extendedfullviewingkey",3]],["bool",15]],null,[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[]],[[]],[[]],[[]],[[]],[[["extendedspendingkey",3]]],[[["u32",15]]],[[["extendedspendingkey",3]]],null,[[],["result",4]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["childindex",4]],["bool",15]],[[["diversifierindex",3]],["bool",15]],[[["diversifierkey",3]],["bool",15]],[[]],[[["read",8]],["result",6]],[[["read",8]],["result",6]],null,[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[["write",8]],["result",6]],[[["write",8]],["result",6]],null,null,[[]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[],["str",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["usize",15]],[[],["error",4]],[[],["language",4]],[[],["count",4]],[[],["mnemonic",3]],[[]],[[]],[[]],[[]],[[["language",4]],["ordering",4]],[[["count",4]],["ordering",4]],[[["mnemonic",3]],["ordering",4]],[[],["language",4]],[[],["count",4]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[["usize",15]]],[[]],[[],["usize",15]],[[["error",4]],["bool",15]],[[["language",4]],["bool",15]],[[["count",4]],["bool",15]],[[["mnemonic",3]],["bool",15]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[]],[[]],[[]],[[]],[[],[["result",4,["mnemonic","error"]],["error",4],["mnemonic",3]]],[[["language",4]],[["result",4,["mnemonic","error"]],["error",4],["mnemonic",3]]],[[],[["result",4,["mnemonic","error"]],["error",4],["mnemonic",3]]],[[["language",4]],[["result",4,["mnemonic","error"]],["error",4],["mnemonic",3]]],[[["str",15]],[["result",4,["mnemonic"]],["mnemonic",3]]],[[["count",4]],["mnemonic",3]],[[["language",4],["count",4]],["mnemonic",3]],[[]],[[]],[[]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[]],[[]],[[]],[[]],[[],[["u8",15],["global",3],["vec",3,["u8","global"]]]],[[],["string",3]],[[],["language",4]],[[["error",4]],["bool",15]],[[["mnemonic",3]],["bool",15]],[[["language",4]],[["option",4,["ordering"]],["ordering",4]]],[[["count",4]],[["option",4,["ordering"]],["ordering",4]]],[[["mnemonic",3]],[["option",4,["ordering"]],["ordering",4]]],[[],["str",15]],[[]],[[]],[[]],[[]],[[]],[[],["string",3]],[[],["string",3]],[[],["string",3]],[[],["string",3]],[[],["usize",15]],[[],["result",4]],[[],["result",4]],[[["usize",15]],[["result",4,["count"]],["count",4]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],[["result",4,["error"]],["error",4]]],[[["language",4]],[["result",4,["error"]],["error",4]]],[[]],[[]],[[]],[[]],[[],["usize",15]],[[["str",15]]],[[]],null,null,null],"p":[[3,"BlockHash"],[3,"BlockHeaderData"],[3,"BlockHeader"],[4,"NetworkUpgrade"],[4,"BranchId"],[4,"Network"],[8,"Parameters"],[3,"MainNetwork"],[3,"TestNetwork"],[3,"BlockHeight"],[3,"PEDERSEN_HASH_EXP_TABLE"],[3,"AuthData"],[8,"ExtensionTxBuilder"],[8,"FromPayload"],[8,"Extension"],[4,"Error"],[3,"Precondition"],[3,"Witness"],[8,"ToPayload"],[13,"InvalidExtensionId"],[13,"ProgramError"],[3,"Script"],[4,"TransparentAddress"],[13,"PublicKey"],[13,"Script"],[4,"Memo"],[4,"Error"],[3,"MemoBytes"],[3,"TextMemo"],[13,"InvalidUtf8"],[13,"TooLong"],[13,"Text"],[13,"Future"],[13,"Arbitrary"],[3,"CommitmentTree"],[3,"IncrementalWitness"],[3,"MerklePath"],[8,"Hashable"],[8,"HashSer"],[3,"SaplingIvk"],[3,"Diversifier"],[3,"Nullifier"],[4,"Rseed"],[3,"ProofGenerationKey"],[3,"ViewingKey"],[3,"Node"],[3,"ValueCommitment"],[3,"PaymentAddress"],[3,"NoteValue"],[3,"Note"],[13,"BeforeZip212"],[13,"AfterZip212"],[3,"OutgoingViewingKey"],[3,"ExpandedSpendingKey"],[3,"FullViewingKey"],[3,"SaplingDomain"],[4,"Personalization"],[13,"MerkleTree"],[8,"TxProver"],[3,"MockTxProver"],[3,"PrivateKey"],[3,"PublicKey"],[3,"BatchEntry"],[3,"Signature"],[8,"TransactionDigest"],[4,"DigestError"],[8,"Authorization"],[4,"TxVersion"],[3,"TxId"],[3,"Transaction"],[3,"Authorized"],[3,"Unauthorized"],[3,"TransactionData"],[3,"TransparentDigests"],[3,"TzeDigests"],[3,"TxDigests"],[13,"Sprout"],[4,"Error"],[3,"Builder"],[3,"Progress"],[13,"ChangeIsNegative"],[13,"TransparentBuild"],[13,"SaplingBuild"],[13,"TzeBuild"],[3,"Amount"],[3,"Unauthorized"],[8,"Authorization"],[3,"SpendDescription"],[3,"Bundle"],[3,"Authorized"],[3,"CompactOutputDescription"],[3,"Unproven"],[3,"SpendDescriptionV5"],[3,"OutputDescription"],[3,"OutputDescriptionV5"],[4,"Error"],[3,"SaplingBuilder"],[3,"SpendDescriptionInfo"],[3,"SaplingMetadata"],[3,"Unauthorized"],[3,"Bundle"],[3,"JsDescription"],[8,"Authorization"],[3,"Bundle"],[3,"Authorized"],[3,"OutPoint"],[3,"TxIn"],[3,"TxOut"],[4,"Error"],[3,"TransparentBuilder"],[3,"Unauthorized"],[8,"Authorization"],[3,"Bundle"],[3,"Authorized"],[3,"OutPoint"],[3,"TzeIn"],[3,"TzeOut"],[4,"Error"],[3,"TzeBuilder"],[3,"TzeSigner"],[3,"Unauthorized"],[13,"WitnessModeMismatch"],[4,"SignableInput"],[3,"SignatureHash"],[3,"TransparentInput"],[3,"TzeInput"],[13,"Transparent"],[13,"Tze"],[3,"TxIdDigester"],[3,"BlockTxCommitmentDigester"],[3,"HashReader"],[3,"HashWriter"],[3,"DiversifierIndex"],[3,"DiversifierKey"],[4,"ChildIndex"],[3,"ExtendedFullViewingKey"],[3,"ExtendedSpendingKey"],[13,"NonHardened"],[13,"Hardened"],[4,"Error"],[4,"Language"],[4,"Count"],[3,"Mnemonic"],[13,"BadWordCount"],[13,"BadEntropyBitCount"],[13,"UnknownWord"]]},\
"zcash_proofs":{"doc":"<em>Zcash circuits and proofs.</em>","t":[3,11,11,0,0,5,11,11,5,11,11,11,11,5,12,12,5,0,0,12,12,0,12,11,11,11,11,0,0,0,0,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,13,13,4,11,11,11,11,11,11,11,11,11,11,11,5,11,11,11,11,11,12,3,3,17,12,12,12,11,11,11,11,12,12,11,11,11,11,11,11,12,11,11,11,11,11,11,12,12,12,11,11,11,11,11,11,11,11,12,12,11,11,12,12,12,12,3,3,3,3,3,3,3,17,3,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,12,12,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,11,11,11,11,11,11,11,11,6,6,3,3,3,3,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,17,5,5],"n":["ZcashParameters","borrow","borrow_mut","circuit","constants","default_params_folder","deref","deref_mut","download_parameters","drop","from","init","into","load_parameters","output_params","output_vk","parse_parameters","prover","sapling","spend_params","spend_vk","sprout","sprout_vk","try_from","try_into","type_id","vzip","ecc","pedersen_hash","sapling","sprout","EdwardsPoint","MontgomeryPoint","add","add","assert_not_small_order","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","conditionally_select","deref","deref","deref_mut","deref_mut","double","drop","drop","fixed_base_multiplication","from","from","get_u","get_v","init","init","inputize","interpret","interpret_unchecked","into","into","into_edwards","mul","repr","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","witness","MerkleTree","NoteCommitment","Personalization","borrow","borrow_mut","clone","clone_into","deref","deref_mut","drop","from","get_bits","init","into","pedersen_hash","to_owned","try_from","try_into","type_id","vzip","0","Output","Spend","TREE_DEPTH","anchor","ar","auth_path","borrow","borrow","borrow_mut","borrow_mut","commitment_randomness","commitment_randomness","deref","deref","deref_mut","deref_mut","drop","drop","esk","from","from","init","init","into","into","payment_address","payment_address","proof_generation_key","synthesize","synthesize","try_from","try_from","try_into","try_into","type_id","type_id","value_commitment","value_commitment","vzip","vzip","0","0","0","0","CommitmentRandomness","JoinSplit","JsInput","JsOutput","NoteValue","PayingKey","SpendingKey","TREE_DEPTH","UniqueRandomness","a_pk","a_sk","auth_path","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","deref","deref","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","drop","drop","drop","drop","drop","drop","drop","drop","from","from","from","from","from","from","from","from","h_sig","init","init","init","init","init","init","init","init","inputs","into","into","into","into","into","into","into","into","outputs","phi","r","r","rho","rt","synthesize","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","value","value","vpub_new","vpub_old","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","FixedGenerator","FixedGeneratorOwned","NOTE_COMMITMENT_RANDOMNESS_GENERATOR","NULLIFIER_POSITION_GENERATOR","PROOF_GENERATION_KEY_GENERATOR","SPENDING_KEY_GENERATOR","VALUE_COMMITMENT_RANDOMNESS_GENERATOR","VALUE_COMMITMENT_VALUE_GENERATOR","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","drop","drop","drop","drop","drop","drop","from","from","from","from","from","from","generate_circuit_generator","init","init","init","init","init","init","into","into","into","into","into","into","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","vzip","vzip","vzip","vzip","vzip","vzip","LocalTxProver","binding_sig","borrow","borrow_mut","bundled","deref","deref_mut","drop","from","from_bytes","init","into","new","new_sapling_proving_context","output_proof","spend_proof","try_from","try_into","type_id","vzip","with_default_location","SaplingProvingContext","SaplingVerificationContext","binding_sig","borrow","borrow","borrow_mut","borrow_mut","check_output","check_spend","default","deref","deref","deref_mut","deref_mut","drop","drop","final_check","from","from","init","init","into","into","new","new","output_proof","spend_proof","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","WITNESS_PATH_SIZE","create_proof","verify_proof"],"q":["zcash_proofs","","","","","","","","","","","","","","","","","","","","","","","","","","","zcash_proofs::circuit","","","","zcash_proofs::circuit::ecc","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","zcash_proofs::circuit::pedersen_hash","","","","","","","","","","","","","","","","","","","","zcash_proofs::circuit::pedersen_hash::Personalization","zcash_proofs::circuit::sapling","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","zcash_proofs::circuit::sprout","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","zcash_proofs::constants","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","zcash_proofs::prover","","","","","","","","","","","","","","","","","","","","","zcash_proofs::sapling","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","zcash_proofs::sprout","",""],"d":["","","","Implementations of the Zcash circuits and Zcash-specific …","Various constants used for the Zcash proofs.","Returns the default folder that the Zcash proving …","","","Download the Zcash Sapling parameters, storing them in the …","","","","","","","","Parse Bls12 keys from bytes as serialized by …","Abstractions over the proving system and parameters for …","Helpers for creating Sapling proofs.","","","APIs for creating and verifying Sprout proofs.","","","","","","Gadgets implementing Jubjub elliptic curve operations.","Gadget for Zcash’s Pedersen hash.","The Sapling circuits.","The “hybrid Sprout” circuit.","","","Performs an affine point addition, not defined for points …","Perform addition between any two points","","","","","","","","Returns <code>self</code> if condition is true, and the neutral element …","","","","","","","","Perform a fixed-base scalar multiplication with <code>by</code> being …","","","","","","","","","Interprets an (x, y) pair as a point in Montgomery, does …","","","Converts an element in the prime order subgroup into a …","Performs a scalar multiplication of this twisted Edwards …","This converts the point into a representation.","","","","","","","","","","This ‘witnesses’ a point inside the constraint system. …","","","","","","","","","","","","","","","","","","","","","","This is an output circuit instance.","This is an instance of the <code>Spend</code> circuit.","","The anchor; the root of the tree. If the note being spent …","Re-randomization of the public key","The authentication path of the commitment in the tree","","","","","The randomness of the note commitment","The randomness used to hide the note commitment data","","","","","","","The ephemeral secret key for DH with recipient","","","","","","","The payment address associated with the note","The payment address of the recipient","Key required to construct proofs for spending notes for a …","","","","","","","","","Pedersen commitment to the value being spent","Pedersen commitment to the value being spent","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Reference to a circuit version of a generator for …","Circuit version of a generator for fixed-base salar …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Creates the 3-bit window table <code>[0, 1, ..., 8]</code> for …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","An implementation of <code>TxProver</code> using Sapling Spend and …","","","","Creates a <code>LocalTxProver</code> using Sapling parameters bundled …","","","","","Creates a <code>LocalTxProver</code> using parameters specified as byte …","","","Creates a <code>LocalTxProver</code> using parameters from the given …","","","","","","","","Attempts to create a <code>LocalTxProver</code> using parameters from …","A context object for creating the Sapling components of a …","A context object for verifying the Sapling components of a …","Create the bindingSig for a Sapling transaction. All calls …","","","","","Perform consensus checks on a Sapling OutputDescription, …","Perform consensus checks on a Sapling SpendDescription, …","","","","","","","","Perform consensus checks on the valueBalance and …","","","","","","","Construct a new context to be used with a single …","Construct a new context to be used with a single …","Create the value commitment and proof for a Sapling …","Create the value commitment, re-randomized key, and proof …","","","","","","","","","","Sprout JoinSplit proof generation.","Sprout JoinSplit proof verification."],"i":[0,1,1,0,0,0,1,1,0,1,1,1,1,0,1,1,0,0,0,1,1,0,1,1,1,1,1,0,0,0,0,0,0,2,3,3,2,3,2,3,3,3,3,2,3,2,3,3,2,3,0,2,3,3,3,2,3,3,3,2,2,3,2,3,3,3,2,3,2,3,2,3,2,3,3,4,4,0,4,4,4,4,4,4,4,4,4,4,4,0,4,4,4,4,4,5,0,0,0,6,6,6,6,7,6,7,6,7,6,7,6,7,6,7,7,6,7,6,7,6,7,6,7,6,6,7,6,7,6,7,6,7,6,7,6,7,8,9,10,11,0,0,0,0,0,0,0,0,0,12,13,13,8,9,10,11,14,13,12,15,8,9,10,11,14,13,12,15,8,9,10,11,14,13,12,15,8,9,10,11,14,13,12,15,8,9,10,11,14,13,12,15,8,9,10,11,14,13,12,15,14,8,9,10,11,14,13,12,15,14,8,9,10,11,14,13,12,15,14,14,13,12,13,14,14,8,9,10,11,14,13,12,15,8,9,10,11,14,13,12,15,8,9,10,11,14,13,12,15,13,12,14,14,8,9,10,11,14,13,12,15,0,0,0,0,0,0,0,0,16,17,18,19,20,21,16,17,18,19,20,21,16,16,17,17,18,18,19,19,20,20,21,21,16,17,18,19,20,21,16,17,18,19,20,21,16,17,18,19,20,21,0,16,17,18,19,20,21,16,17,18,19,20,21,16,17,18,19,20,21,16,17,18,19,20,21,16,17,18,19,20,21,16,17,18,19,20,21,0,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,0,0,23,23,24,23,24,24,24,23,23,24,23,24,23,24,24,23,24,23,24,23,24,23,24,23,23,23,24,23,24,23,24,23,24,0,0,0],"f":[null,[[]],[[]],null,null,[[],[["pathbuf",3],["option",4,["pathbuf"]]]],[[["usize",15]]],[[["usize",15]]],[[],[["error",4],["result",4,["error"]]]],[[["usize",15]]],[[]],[[],["usize",15]],[[]],[[["option",4,["path"]],["path",3]],["zcashparameters",3]],null,null,[[["option",4],["read",8]],["zcashparameters",3]],null,null,null,null,null,null,[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],null,null,null,null,null,null,[[],[["result",4,["synthesiserror"]],["synthesiserror",4]]],[[],[["result",4,["synthesiserror"]],["synthesiserror",4]]],[[],[["synthesiserror",4],["result",4,["synthesiserror"]]]],[[]],[[]],[[]],[[]],[[],["edwardspoint",3]],[[]],[[["boolean",4]],[["result",4,["synthesiserror"]],["synthesiserror",4]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[],[["result",4,["synthesiserror"]],["synthesiserror",4]]],[[["usize",15]]],[[["usize",15]]],[[["fixedgenerator",6]],[["result",4,["edwardspoint","synthesiserror"]],["synthesiserror",4],["edwardspoint",3]]],[[]],[[]],[[],["allocatednum",3]],[[],["allocatednum",3]],[[],["usize",15]],[[],["usize",15]],[[],[["synthesiserror",4],["result",4,["synthesiserror"]]]],[[["allocatednum",3]],[["result",4,["synthesiserror"]],["synthesiserror",4]]],[[["num",3,["scalar"]],["scalar",3]]],[[]],[[]],[[],[["result",4,["edwardspoint","synthesiserror"]],["synthesiserror",4],["edwardspoint",3]]],[[],[["result",4,["synthesiserror"]],["synthesiserror",4]]],[[],[["result",4,["vec","synthesiserror"]],["synthesiserror",4],["vec",3,["boolean"]]]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[]],[[]],[[["extendedpoint",3],["option",4,["extendedpoint"]]],[["result",4,["synthesiserror"]],["synthesiserror",4]]],null,null,null,[[]],[[]],[[],["personalization",4]],[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[],[["bool",15],["global",3],["vec",3,["bool","global"]]]],[[],["usize",15]],[[]],[[["personalization",4]],[["result",4,["edwardspoint","synthesiserror"]],["synthesiserror",4],["edwardspoint",3]]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],null,null,[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],null,[[]],[[]],[[],["usize",15]],[[],["usize",15]],[[]],[[]],null,null,null,[[],[["synthesiserror",4],["result",4,["synthesiserror"]]]],[[],[["synthesiserror",4],["result",4,["synthesiserror"]]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],null,null,[[]],[[]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,null,null,null,null,null,[[],[["synthesiserror",4],["result",4,["synthesiserror"]]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["fixedgeneratorowned",6]],[[["usize",15]]],[[],["fixedgeneratorowned",6]],[[["usize",15]]],[[],["fixedgeneratorowned",6]],[[["usize",15]]],[[],["fixedgeneratorowned",6]],[[["usize",15]]],[[["usize",15]]],[[],["fixedgeneratorowned",6]],[[],["fixedgeneratorowned",6]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[["subgrouppoint",3]],["fixedgeneratorowned",6]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],null,[[["amount",3]],[["signature",3],["result",4,["signature"]]]],[[]],[[]],[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[],["usize",15]],[[]],[[["path",3]]],[[]],[[["u64",15],["fr",3],["paymentaddress",3]]],[[["u64",15],["diversifier",3],["scalar",3],["merklepath",3,["node"]],["proofgenerationkey",3],["node",3],["fr",3],["rseed",4]],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[],["option",4]],null,null,[[["amount",3]],[["signature",3],["result",4,["signature"]]]],[[]],[[]],[[]],[[]],[[["proof",3,["bls12"]],["scalar",3],["extendedpoint",3],["bls12",3],["preparedverifyingkey",3]],["bool",15]],[[["scalar",3],["bls12",3],["publickey",3],["proof",3,["bls12"]],["extendedpoint",3],["signature",3],["preparedverifyingkey",3]],["bool",15]],[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["amount",3],["signature",3]],["bool",15]],[[]],[[]],[[],["usize",15]],[[],["usize",15]],[[]],[[]],[[]],[[["bool",15]]],[[["u64",15],["fr",3],["paymentaddress",3],["parameters",3]]],[[["u64",15],["diversifier",3],["scalar",3],["merklepath",3,["node"]],["parameters",3],["proofgenerationkey",3],["node",3],["fr",3],["preparedverifyingkey",3],["rseed",4]],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[]],[[]],null,[[["u64",15],["parameters",3]],[["bls12",3],["proof",3,["bls12"]]]],[[["u64",15],["preparedverifyingkey",3]],["bool",15]]],"p":[[3,"ZcashParameters"],[3,"MontgomeryPoint"],[3,"EdwardsPoint"],[4,"Personalization"],[13,"MerkleTree"],[3,"Spend"],[3,"Output"],[3,"SpendingKey"],[3,"PayingKey"],[3,"UniqueRandomness"],[3,"CommitmentRandomness"],[3,"JsOutput"],[3,"JsInput"],[3,"JoinSplit"],[3,"NoteValue"],[3,"PROOF_GENERATION_KEY_GENERATOR"],[3,"NOTE_COMMITMENT_RANDOMNESS_GENERATOR"],[3,"NULLIFIER_POSITION_GENERATOR"],[3,"VALUE_COMMITMENT_VALUE_GENERATOR"],[3,"VALUE_COMMITMENT_RANDOMNESS_GENERATOR"],[3,"SPENDING_KEY_GENERATOR"],[3,"LocalTxProver"],[3,"SaplingProvingContext"],[3,"SaplingVerificationContext"]]}\
}');
if (window.initSearch) {window.initSearch(searchIndex)};